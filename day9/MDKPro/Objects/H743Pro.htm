<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\H743Pro.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\H743Pro.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6110004: Last Updated: Wed Jan 30 11:28:12 2019
<BR><P>
<H3>Maximum Stack Usage =        760 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ThreadTaskGUI &rArr; refr_monitor &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1aa]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[83]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[83]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[260]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[260]">osRtxErrorNotify</a><BR>
 <LI><a href="#[4]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">HardFault_Handler</a><BR>
 <LI><a href="#[5]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">MemManage_Handler</a><BR>
 <LI><a href="#[6]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">BusFault_Handler</a><BR>
 <LI><a href="#[7]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">UsageFault_Handler</a><BR>
 <LI><a href="#[1c1]">RTE_Printf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c9]">RTE_Vprintf</a><BR>
 <LI><a href="#[31c]">Hcd_UnmaskSPIInterrupts</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[318]">MaskSPIInterrupts</a><BR>
 <LI><a href="#[205]">refresh_childen_position</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[205]">refresh_childen_position</a><BR>
 <LI><a href="#[202]">refresh_childen_style</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[202]">refresh_childen_style</a><BR>
 <LI><a href="#[207]">delete_children</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[207]">delete_children</a><BR>
 <LI><a href="#[20d]">lv_refr_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20d]">lv_refr_obj</a><BR>
 <LI><a href="#[20c]">lv_refr_get_top_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20c]">lv_refr_get_top_obj</a><BR>
 <LI><a href="#[1ff]">indev_search_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1ff]">indev_search_obj</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[83]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16a]">Atheros_Driver_Task</a> from cust_driver_main.o(i.Atheros_Driver_Task) referenced from cust_driver_main.o(i.Custom_Driver_CreateThread)
 <LI><a href="#[85]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f9]">Board_GUI_TouchScan</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[f8]">Board_LCD_FillFrameNormal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[f7]">Board_LCD_Map</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[a7]">Board_Spi1_MSPDeInitCallback</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[a6]">Board_Spi1_MSPInitCallback</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[a5]">Board_Spi4_MSPDeInitCallback</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[a4]">Board_Spi4_MSPInitCallback</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[9e]">Board_Uart1_MSPDeInitCallback</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[9f]">Board_Uart1_MSPInitCallback</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[105]">Board_WIFI_Assert</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[101]">Board_WIFI_Delay</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[102]">Board_WIFI_Free</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[fb]">Board_WIFI_GetTick</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[fd]">Board_WIFI_InterfaceDeInit</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[fc]">Board_WIFI_InterfaceInit</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[104]">Board_WIFI_InterruptSet</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[103]">Board_WIFI_Malloc</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[ff]">Board_WIFI_PowerSet</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[fe]">Board_WIFI_SPITransRec</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[6]">BusFault_Handler</a> from lto-llvm-ee9d41.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16b]">Custom_FreeRxRequest</a> from cust_driver_main.o(i.Custom_FreeRxRequest) referenced from cust_driver_main.o(i.Custom_GetRxRequest)
 <LI><a href="#[55]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream0_IRQHandler</a> from lto-llvm-ee9d41.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream2_IRQHandler</a> from lto-llvm-ee9d41.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream3_IRQHandler</a> from lto-llvm-ee9d41.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream4_IRQHandler</a> from lto-llvm-ee9d41.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">DMA2D_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from lto-llvm-ee9d41.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16c]">Driver_RxComplete</a> from driver_txrx.o(i.Driver_RxComplete) referenced from driver_main.o(i.Driver_RxReady)
 <LI><a href="#[16d]">Driver_TxComplete</a> from driver_txrx.o(i.Driver_TxComplete) referenced from driver_txrx.o(i.Driver_SubmitTxRequest)
 <LI><a href="#[16d]">Driver_TxComplete</a> from driver_txrx.o(i.Driver_TxComplete) referenced from driver_txrx.o(i.Driver_SubmitTxRequestNoBlock)
 <LI><a href="#[48]">ETH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from lto-llvm-ee9d41.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[23]">EXTI9_5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[21]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[20]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[22]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[10]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11a]">GUI_CPU_TimerCallback</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[73]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[71]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from lto-llvm-ee9d41.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[65]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e3]">LEDTimer_Callback</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[63]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">LTDC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from lto-llvm-ee9d41.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from lto-llvm-ee9d41.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">OTG_FS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[d]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">QUADSPI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a3]">RTE_Puts</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[9b]">RTE_Shell_CMD_Help</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[9c]">RTE_Shell_CMD_RTEInfor</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[9d]">RTE_Shell_Poll</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[2]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">SDMMC1_IRQHandler</a> from lto-llvm-ee9d41.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[81]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2f]">SPI1_IRQHandler</a> from lto-llvm-ee9d41.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">SPI4_IRQHandler</a> from lto-llvm-ee9d41.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[142]">SPI_2linesRxISR_16BIT</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[141]">SPI_2linesRxISR_32BIT</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[143]">SPI_2linesRxISR_8BIT</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[145]">SPI_2linesTxISR_16BIT</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[140]">SPI_2linesTxISR_32BIT</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[144]">SPI_2linesTxISR_8BIT</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[149]">SPI_DMAAbortOnError</a> from lto-llvm-ee9d41.o(.text) referenced 4 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[148]">SPI_DMAError</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[147]">SPI_DMAHalfTransmitCplt</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[146]">SPI_DMATransmitCplt</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[ae]">SPI_RxISR_16BIT</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[af]">SPI_RxISR_32BIT</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[ad]">SPI_RxISR_8BIT</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[ac]">SPI_TxISR_16BIT</a> from lto-llvm-ee9d41.o(.text) referenced 4 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[ab]">SPI_TxISR_32BIT</a> from lto-llvm-ee9d41.o(.text) referenced 4 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[aa]">SPI_TxISR_8BIT</a> from lto-llvm-ee9d41.o(.text) referenced 4 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[8]">SVC_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[132]">ServerCloseCheckCallback</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[131]">ServerOpenCheckCallback</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[b]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[b]">SysTick_Handler</a> from irq_cm4f.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[96]">SystemInit</a> from lto-llvm-ee9d41.o(.text) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[e4]">SystemStaticsTimer_Callback</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[e]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12c]">TCPServer_close_action_animation</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[130]">TCPServer_close_action_animation_cb</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[7a]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">TIM16_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">TIM17_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[24]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[27]">TIM1_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[26]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[25]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[28]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">TIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">TIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[36]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e5]">ThreadTaskGUI</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[a8]">ThreadTaskSYS</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[e6]">ThreadTaskWIFI</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">UART5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">UART7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">UART8_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a9]">UART_DMAAbortOnError</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[a2]">UART_DMAError</a> from lto-llvm-ee9d41.o(.text) referenced 4 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[a0]">UART_DMAReceiveCplt</a> from lto-llvm-ee9d41.o(.text) referenced 4 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[a1]">UART_DMARxHalfCplt</a> from lto-llvm-ee9d41.o(.text) referenced 4 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[31]">USART1_IRQHandler</a> from lto-llvm-ee9d41.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">USART2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[33]">USART3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from lto-llvm-ee9d41.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[100]">User_WIFIConnect_Callback</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[106]">User_WIFI_WPS_EASY_Callback</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[95]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[111]">WIFI_CLOSERTCPSERVER_Fnction</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[10a]">WIFI_CONNECT_Fnction</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[10b]">WIFI_DISCONNECT_Fnction</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[112]">WIFI_ERROR_Function</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[10c]">WIFI_GETIP_Fnction</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[108]">WIFI_IDLE_Function</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[107]">WIFI_INIT_Function</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[10d]">WIFI_OPENTCPSERVER_Fnction</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[109]">WIFI_SCAN_Fnction</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[10f]">WIFI_TCPSERVERREC_Fnction</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[110]">WIFI_TCPSERVERSED_Fnction</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[10e]">WIFI_TCPSERVERWAIT_Fnction</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[c]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[139]">WifiConnectCheckCallback</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[13c]">WifiDisconnectCheckCallback</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[13b]">WifiScanCheckCallback</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[97]">__main</a> from __main.o(!!!main) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[9a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[99]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[98]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[f5]">anim_task</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[122]">bench_close_action_animation</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[13e]">bench_close_action_animation_cb</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[117]">btn_bench_action</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[fa]">btn_click_action</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[118]">btn_clock_action</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[119]">btn_tcpserver_action</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[116]">btn_wifi_action</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[124]">clock_close_action_animation</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[133]">clock_close_action_animation_cb</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[df]">cursor_blink_anim</a> from lto-llvm-ee9d41.o(.text) referenced 8 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[b7]">deg_test_inv</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[b8]">deg_test_norm</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[113]">gui_input_get_calib</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[f6]">indev_proc_task</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[138]">kb_clean_action_animation</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[137]">kb_ok_action_animation</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[da]">lv_anim_path_ease_in_out</a> from lto-llvm-ee9d41.o(.text) referenced 4 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[b6]">lv_anim_path_linear</a> from lto-llvm-ee9d41.o(.text) referenced 38 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[c5]">lv_anim_path_step</a> from lto-llvm-ee9d41.o(.text) referenced 10 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[d5]">lv_arc_design</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[d6]">lv_arc_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[11d]">lv_bar_design</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[11c]">lv_bar_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[ba]">lv_btn_design</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[bb]">lv_btn_ink_effect_anim</a> from lto-llvm-ee9d41.o(.text) referenced 16 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[bc]">lv_btn_ink_effect_anim_ready</a> from lto-llvm-ee9d41.o(.text) referenced 6 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[b9]">lv_btn_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[be]">lv_btnm_design</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[bd]">lv_btnm_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[bf]">lv_cont_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[127]">lv_ddlist_design</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[c0]">lv_ddlist_pos_current_option</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[128]">lv_ddlist_release_action</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[125]">lv_ddlist_scrl_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[126]">lv_ddlist_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[0]">lv_font_get_bitmap_continuous</a> from lto-llvm-ee9d41.o(.text) referenced 8 times from lto-llvm-ee9d41.o(.data)
 <LI><a href="#[1]">lv_font_get_width_continuous</a> from lto-llvm-ee9d41.o(.text) referenced 8 times from lto-llvm-ee9d41.o(.data)
 <LI><a href="#[c2]">lv_img_design</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[c1]">lv_img_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[136]">lv_kb_def_action</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[135]">lv_kb_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[c7]">lv_label_design</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[c8]">lv_label_set_offset_x</a> from lto-llvm-ee9d41.o(.text) referenced 8 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[c9]">lv_label_set_offset_y</a> from lto-llvm-ee9d41.o(.text) referenced 8 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[c6]">lv_label_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[cb]">lv_list_btn_signal</a> from lto-llvm-ee9d41.o(.text) referenced 24 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[ca]">lv_list_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[cf]">lv_mbox_close_action</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[ce]">lv_mbox_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[d0]">lv_obj_del</a> from lto-llvm-ee9d41.o(.text) referenced 4 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[b1]">lv_obj_design</a> from lto-llvm-ee9d41.o(.text) referenced 4 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[b5]">lv_obj_set_height</a> from lto-llvm-ee9d41.o(.text) referenced 8 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[cd]">lv_obj_set_pos</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[b2]">lv_obj_set_width</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[b4]">lv_obj_set_x</a> from lto-llvm-ee9d41.o(.text) referenced 32 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[b3]">lv_obj_set_y</a> from lto-llvm-ee9d41.o(.text) referenced 32 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[b0]">lv_obj_signal</a> from lto-llvm-ee9d41.o(.text) referenced 4 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[d4]">lv_page_design</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[d1]">lv_page_scrollable_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[d3]">lv_page_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[d8]">lv_preload_design</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[d7]">lv_preload_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[d9]">lv_preload_spinner_animation</a> from lto-llvm-ee9d41.o(.text) referenced 8 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[129]">lv_roller_design</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[12b]">lv_roller_scrl_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[12a]">lv_roller_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[d2]">lv_scrl_design</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[11f]">lv_slider_design</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[11e]">lv_slider_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[120]">lv_sw_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[dd]">lv_ta_design</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[de]">lv_ta_scrollable_design</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[dc]">lv_ta_scrollable_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[db]">lv_ta_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[114]">lv_tabview_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[e9]">lv_ufs_close</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[f4]">lv_ufs_dir_close</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[f2]">lv_ufs_dir_open</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[f3]">lv_ufs_dir_read</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[f1]">lv_ufs_free</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[e8]">lv_ufs_open</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[eb]">lv_ufs_read</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[e7]">lv_ufs_ready</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[ea]">lv_ufs_remove</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[ed]">lv_ufs_seek</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[f0]">lv_ufs_size</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[ee]">lv_ufs_tell</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[ef]">lv_ufs_trunc</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[ec]">lv_ufs_write</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[e2]">lv_win_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[164]">osRtxEventFlagsPostProcess</a> from rtx_evflags.o(.text.osRtxEventFlagsPostProcess) referenced from rtx_evflags.o(.text.svcRtxEventFlagsNew)
 <LI><a href="#[158]">osRtxIdleThread</a> from lto-llvm-ee9d41.o(.text) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[165]">osRtxMemoryInit</a> from rtx_memory.o(.text.osRtxMemoryInit) referenced from rtx_kernel.o(.text.svcRtxKernelInitialize)
 <LI><a href="#[166]">osRtxSemaphorePostProcess</a> from rtx_semaphore.o(.text.osRtxSemaphorePostProcess) referenced from rtx_semaphore.o(.text.svcRtxSemaphoreNew)
 <LI><a href="#[168]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[159]">osRtxTimerThread</a> from lto-llvm-ee9d41.o(.text) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[167]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[c4]">pwd_char_hider</a> from lto-llvm-ee9d41.o(.text) referenced 6 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[c3]">pwd_char_hider_anim</a> from lto-llvm-ee9d41.o(.text) referenced 12 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[169]">query_credit_deficit</a> from api_txrx.o(i.query_credit_deficit) referenced from api_txrx.o(i.Api_TxGetStatus)
 <LI><a href="#[13f]">refr_monitor</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[123]">run_test_click</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[14a]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced from rtx_delay.o(.text.osDelay)
 <LI><a href="#[14b]">svcRtxEventFlagsNew</a> from rtx_evflags.o(.text.svcRtxEventFlagsNew) referenced from rtx_evflags.o(.text.osEventFlagsNew)
 <LI><a href="#[14c]">svcRtxEventFlagsSet</a> from rtx_evflags.o(.text.svcRtxEventFlagsSet) referenced from rtx_evflags.o(.text.osEventFlagsSet)
 <LI><a href="#[14d]">svcRtxEventFlagsWait</a> from rtx_evflags.o(.text.svcRtxEventFlagsWait) referenced from rtx_evflags.o(.text.osEventFlagsWait)
 <LI><a href="#[14e]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[14f]">svcRtxKernelGetSysTimerCount</a> from rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount) referenced from rtx_kernel.o(.text.osKernelGetSysTimerCount)
 <LI><a href="#[150]">svcRtxKernelGetSysTimerFreq</a> from rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq) referenced from rtx_kernel.o(.text.osKernelGetSysTimerFreq)
 <LI><a href="#[151]">svcRtxKernelGetTickCount</a> from rtx_kernel.o(.text.svcRtxKernelGetTickCount) referenced from rtx_kernel.o(.text.osKernelGetTickCount)
 <LI><a href="#[152]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[153]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[154]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[155]">svcRtxMutexDelete</a> from rtx_mutex.o(.text.svcRtxMutexDelete) referenced from rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[156]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[157]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[15a]">svcRtxSemaphoreAcquire</a> from rtx_semaphore.o(.text.svcRtxSemaphoreAcquire) referenced from rtx_semaphore.o(.text.osSemaphoreAcquire)
 <LI><a href="#[15b]">svcRtxSemaphoreDelete</a> from rtx_semaphore.o(.text.svcRtxSemaphoreDelete) referenced from rtx_semaphore.o(.text.osSemaphoreDelete)
 <LI><a href="#[15c]">svcRtxSemaphoreNew</a> from rtx_semaphore.o(.text.svcRtxSemaphoreNew) referenced from rtx_semaphore.o(.text.osSemaphoreNew)
 <LI><a href="#[15d]">svcRtxSemaphoreRelease</a> from rtx_semaphore.o(.text.svcRtxSemaphoreRelease) referenced from rtx_semaphore.o(.text.osSemaphoreRelease)
 <LI><a href="#[15e]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[15f]">svcRtxThreadFlagsSet</a> from rtx_thread.o(.text.svcRtxThreadFlagsSet) referenced from rtx_thread.o(.text.osThreadFlagsSet)
 <LI><a href="#[160]">svcRtxThreadFlagsWait</a> from rtx_thread.o(.text.svcRtxThreadFlagsWait) referenced from rtx_thread.o(.text.osThreadFlagsWait)
 <LI><a href="#[161]">svcRtxThreadGetId</a> from rtx_thread.o(.text.svcRtxThreadGetId) referenced from rtx_thread.o(.text.osThreadGetId)
 <LI><a href="#[162]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[163]">svcRtxThreadTerminate</a> from rtx_thread.o(.text.svcRtxThreadTerminate) referenced from rtx_thread.o(.text.osThreadTerminate)
 <LI><a href="#[115]">tab_btnm_action</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[e1]">tabpage_scrl_signal</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[e0]">tabpage_signal</a> from lto-llvm-ee9d41.o(.text) referenced 4 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[12e]">tcpserver_btn_close_action</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[12d]">tcpserver_btn_open_action</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[12f]">tcpserver_btnm_action</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[11b]">wifi_close_action_animation</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[134]">wifi_close_action_animation_cb</a> from lto-llvm-ee9d41.o(.text) referenced 4 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[13d]">wifi_mbox_close_action</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[13a]">wifi_scancancel_action</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[cc]">wifi_select_action</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
 <LI><a href="#[121]">wifi_sw_action</a> from lto-llvm-ee9d41.o(.text) referenced 2 times from lto-llvm-ee9d41.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[97]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[16e]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[170]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3b2]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3b3]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3b4]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3b5]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3b6]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[171]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[192]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[173]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[3b7]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[181]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[175]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[3b8]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[177]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[3b9]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[3ba]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[3bb]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3bc]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[179]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[3bd]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[3be]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[3bf]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[3c0]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[3c1]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[3c2]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[3c3]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[3c4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[3c5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[3c6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[3c7]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[3c8]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[3c9]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[3ca]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[3cb]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[186]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[3cc]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[3cd]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[3ce]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[3cf]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[3d0]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[3d1]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[3d2]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[16f]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[3d3]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[17c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[17e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_postsh_1 &rArr; _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[180]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[182]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; RTE_RoundRobin_CreateTimer &rArr; RTE_MEM_Realloc &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[1ab]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[185]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[3d5]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[187]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1aa]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq_cm4f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> startup_stm32h743xx.o(RESET)
<LI> rtx_kernel.o(.text.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[18b]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getLibVersion
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_monitor
</UL>

<P><STRONG><a name="[18d]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[18e]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[174]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[190]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[193]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_OPENTCPSERVER_Fnction
</UL>

<P><STRONG><a name="[2f9]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_BssInfoEvent
</UL>

<P><STRONG><a name="[214]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_open
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_dir_read
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>

<P><STRONG><a name="[213]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanNetworkScan
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clean_filename
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btnm_action
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_open
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_action
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiDisconnectCheckCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConnectCheckCallback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>

<P><STRONG><a name="[307]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_sys_params
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[24f]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btnm_action
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_open_action
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_ok_action_animation
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiDisconnectCheckCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConnectCheckCallback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>

<P><STRONG><a name="[1cc]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_accept
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_recvfrom
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put_data
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_GetPmkEvent
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_scan_info
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btnm_action
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vmap
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vfill
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_write
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_read
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_action
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_WIFI_WPS_EASY_Callback
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Shell_Poll
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3d6]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[265]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[3d7]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[3d8]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_scan_info
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_INIT_Function
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_FillFrameNormal
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>

<P><STRONG><a name="[198]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[26b]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1b0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_str_pmk
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_reinit
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_WaitTarget
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc_raw
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiDisconnectCheckCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConnectCheckCallback
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_INIT_Function
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Shell_Poll
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>

<P><STRONG><a name="[1b1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d9]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[19a]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>

<P><STRONG><a name="[1cd]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_btnm_action
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_remove
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_open
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_action
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_design
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_RoundRobin_CreateTimer
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[3da]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3db]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[3dd]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[3de]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1a3]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[18c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[98]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[195]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtol &rArr; _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[3df]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1a6]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[178]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1a2]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a5]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1a7]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoul &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[19e]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17d]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[1a9]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[184]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3e0]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3e1]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3e2]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[183]"></a>main</STRONG> (Thumb, 17996 bytes, Stack size 184 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = main &rArr; RTE_RoundRobin_CreateTimer &rArr; RTE_MEM_Realloc &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerFreq
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_RoundRobin_CreateTimer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_LOG_ADD
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Config
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart1_MSPInitCallback
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Spi_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[31]"></a>USART1_IRQHandler</STRONG> (Thumb, 1632 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_LOG_ADD
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI4_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI4_IRQHandler &rArr; HAL_SPI_IRQHandler &rArr; osEventFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EXTI4_IRQHandler &rArr; DRIVER_INT_HANDLE &rArr; HW_InterruptHandler &rArr; Custom_Driver_Interrupt_WakeDriver &rArr; rw_post_drv_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_INT_HANDLE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SPI1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI1_IRQHandler &rArr; HAL_SPI_IRQHandler &rArr; osEventFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 904 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = SDMMC1_IRQHandler &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SD_WaitReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e8]"></a>rw_creat_task</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_CreateThread
</UL>

<P><STRONG><a name="[1e9]"></a>rw_del_task</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rw_del_task
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[1eb]"></a>rw_creat_mutex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
</UL>

<P><STRONG><a name="[1ec]"></a>rw_del_mutex</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rw_del_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_deinit
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_shutdown
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[1ee]"></a>rw_lock_mutex</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rw_lock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnableDisableSPIIRQ
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_qos_state_init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>

<P><STRONG><a name="[1ef]"></a>rw_unlock_mutex</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rw_unlock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnableDisableSPIIRQ
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_qos_state_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
</UL>

<P><STRONG><a name="[1f0]"></a>rw_creat_sem</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
</UL>

<P><STRONG><a name="[1f2]"></a>rw_del_sem</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rw_del_sem
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_deinit
</UL>

<P><STRONG><a name="[1f4]"></a>rw_post_sem</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeDriver
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
</UL>

<P><STRONG><a name="[1f6]"></a>rw_pend_sem</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rw_pend_sem
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atheros_Driver_Task
</UL>

<P><STRONG><a name="[3e3]"></a>rw_enter_critical</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[3e4]"></a>rw_exit_critical</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[1f8]"></a>rw_post_drv_sem</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rw_post_drv_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_Interrupt_WakeDriver
</UL>

<P><STRONG><a name="[158]"></a>osRtxIdleThread</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[25d]"></a>_mutex_acquire</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[25e]"></a>_mutex_free</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[25f]"></a>_mutex_initialize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>

<P><STRONG><a name="[261]"></a>_mutex_release</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[159]"></a>osRtxTimerThread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[17f]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_postsh_1
</UL>

<P><STRONG><a name="[3e5]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[19c]"></a>__user_perthread_libspace</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[260]"></a>osRtxErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[263]"></a>_sys_open</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_open &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[3e6]"></a>_sys_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[264]"></a>_sys_write</STRONG> (Thumb, 1172 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _sys_write &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
</UL>

<P><STRONG><a name="[3e7]"></a>_sys_read</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[3e8]"></a>_sys_istty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[3e9]"></a>_sys_seek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[3ea]"></a>_sys_flen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[96]"></a>SystemInit</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[1bc]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3eb]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_clean_action_animation
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_RoundRobin_Run
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scancancel_action
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_close_action_animation
</UL>

<P><STRONG><a name="[269]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[3ec]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_INIT_Function
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Vprintf
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>

<P><STRONG><a name="[3ed]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[3ee]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[26a]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[3ef]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[28d]"></a>OS_Tick_Enable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[26f]"></a>OS_Tick_GetClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetClock))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerFreq
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerFreq
</UL>

<P><STRONG><a name="[287]"></a>OS_Tick_GetCount</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetCount))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[28c]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[289]"></a>OS_Tick_GetInterval</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetInterval))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[288]"></a>OS_Tick_GetOverflow</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetOverflow))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>

<P><STRONG><a name="[28b]"></a>OS_Tick_Setup</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[1e5]"></a>osDelay</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_TCPSERVERREC_Fnction
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GETIP_Fnction
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_CONNECT_Fnction
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskWIFI
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskSYS
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_WIFI_InterfaceInit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_WIFI_Delay
</UL>

<P><STRONG><a name="[1c4]"></a>osEventFlagsNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_evflags.o(.text.osEventFlagsNew))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskWIFI
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d8]"></a>osEventFlagsSet</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtx_evflags.o(.text.osEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osEventFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
</UL>

<P><STRONG><a name="[1e7]"></a>osEventFlagsWait</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtx_evflags.o(.text.osEventFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osEventFlagsWait &rArr; EventFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_WIFI_SPITransRec
</UL>

<P><STRONG><a name="[1ac]"></a>osKernelGetState</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Puts
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Config
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_WIFI_GetTick
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[1b3]"></a>osKernelGetSysTimerCount</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetSysTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osKernelGetSysTimerCount &rArr; svcRtxKernelGetSysTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetSysTimerCount
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[1b2]"></a>osKernelGetSysTimerFreq</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetSysTimerFreq))
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetClock
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ad]"></a>osKernelGetTickCount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_task
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Puts
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Config
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_WIFI_GetTick
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c5]"></a>osKernelInitialize</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
</UL>

<P><STRONG><a name="[1c7]"></a>osKernelStart</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1be]"></a>osMutexAcquire</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Monitor
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>

<P><STRONG><a name="[1ed]"></a>osMutexDelete</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexDelete))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_mutex
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[1b4]"></a>osMutexNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_mutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>

<P><STRONG><a name="[1bf]"></a>osMutexRelease</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Monitor
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
</UL>

<P><STRONG><a name="[286]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[27a]"></a>osRtxMemoryFree</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[165]"></a>osRtxMemoryInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.svcRtxKernelInitialize)
</UL>
<P><STRONG><a name="[285]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[27b]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>

<P><STRONG><a name="[28a]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[272]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[189]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[26d]"></a>osRtxPostProcess</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>

<P><STRONG><a name="[275]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayTick
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[274]"></a>osRtxThreadDispatch</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[273]"></a>osRtxThreadListGet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[27d]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>

<P><STRONG><a name="[270]"></a>osRtxThreadListRemove</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[27c]"></a>osRtxThreadListSort</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadListSort
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[276]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[27f]"></a>osRtxThreadStackCheck</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadStackCheck))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[280]"></a>osRtxThreadStartup</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[278]"></a>osRtxThreadSwitch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStackCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[281]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreAcquire
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
</UL>

<P><STRONG><a name="[271]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[18a]"></a>osRtxTick_Handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1f7]"></a>osSemaphoreAcquire</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreAcquire))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_pend_sem
</UL>

<P><STRONG><a name="[1f3]"></a>osSemaphoreDelete</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreDelete))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_sem
</UL>

<P><STRONG><a name="[1f1]"></a>osSemaphoreNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_semaphore.o(.text.osSemaphoreNew))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_sem
</UL>

<P><STRONG><a name="[1f5]"></a>osSemaphoreRelease</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_sem
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_drv_sem
</UL>

<P><STRONG><a name="[167]"></a>osThreadExit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[268]"></a>osThreadFlagsSet</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osThreadFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[1e4]"></a>osThreadFlagsWait</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadFlagsWait))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_Map
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_FillFrameNormal
</UL>

<P><STRONG><a name="[262]"></a>osThreadGetId</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadGetId))
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[1c6]"></a>osThreadNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskSYS
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_task
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ea]"></a>osThreadTerminate</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadTerminate))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_task
</UL>

<P><STRONG><a name="[19f]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[28f]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[28e]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[290]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[291]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[1a0]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1a1]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[292]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[293]"></a>Api_AggrRecvAddbaReqEvent</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_AggrRecvAddbaReqEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Api_AggrRecvAddbaReqEvent &rArr; aggr_recv_addba_req_evt &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_recv_addba_req_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_addba_req_event_rx
</UL>

<P><STRONG><a name="[295]"></a>Api_AggrRecvDelbaReqEvent</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_AggrRecvDelbaReqEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Api_AggrRecvDelbaReqEvent &rArr; aggr_recv_delba_req_evt &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_recv_delba_req_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_delba_req_event_rx
</UL>

<P><STRONG><a name="[297]"></a>Api_BssInfoEvent</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_BssInfoEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Api_BssInfoEvent &rArr; Custom_Api_BssInfoEvent &rArr; fill_scan_info &rArr; Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_BssInfoEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssInfo_event_rx
</UL>

<P><STRONG><a name="[299]"></a>Api_ConnectEvent</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, api_wmi_rx.o(i.Api_ConnectEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Api_ConnectEvent &rArr; aggr_reset_state &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_reset_state
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_event_rx
</UL>

<P><STRONG><a name="[29e]"></a>Api_ConnectWiFi</STRONG> (Thumb, 332 bytes, Stack size 72 bytes, api_ioctl.o(i.Api_ConnectWiFi))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Install_static_wep_keys
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
</UL>

<P><STRONG><a name="[2a3]"></a>Api_DataTxStart</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, api_txrx.o(i.Api_DataTxStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Api_DataTxStart &rArr; wmi_data_hdr_add &rArr; wmi_meta_add &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_AC2EndpointID
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_implicit_create_pstream
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
</UL>

<P><STRONG><a name="[2aa]"></a>Api_DeInitFinish</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, api_init.o(i.Api_DeInitFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Api_DeInitFinish &rArr; Driver_ContextDeInit &rArr; Custom_Driver_ContextDeInit &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_deinit
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextDeInit
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[2ff]"></a>Api_DeInitStart</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, api_init.o(i.Api_DeInitStart))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[2ad]"></a>Api_DisconnectEvent</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, api_wmi_rx.o(i.Api_DisconnectEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_reset_state
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_DisconnectEvent
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_event_rx
</UL>

<P><STRONG><a name="[2b0]"></a>Api_DisconnectWiFi</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, api_ioctl.o(i.Api_DisconnectWiFi))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Api_DisconnectWiFi &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[2a5]"></a>Api_DriverAccessCheck</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, api_ioctl.o(i.Api_DriverAccessCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Api_DriverAccessCheck &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_socket
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_shutdown
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_select
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_recvfrom
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_listen
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig_dhcp_pool
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bind
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_accept
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[2b2]"></a>Api_GetPmkEvent</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, api_wmi_rx.o(i.Api_GetPmkEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Api_GetPmkEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_pmk_event_rx
</UL>

<P><STRONG><a name="[2b4]"></a>Api_InitFinish</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, api_init.o(i.Api_InitFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Api_InitFinish &rArr; Custom_Driver_WaitForCondition &rArr; rw_pend_sem
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[2b5]"></a>Api_InitStart</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, api_init.o(i.Api_InitStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Api_InitStart &rArr; Driver_ContextInit &rArr; Custom_Driver_ContextInit &rArr; a_netbuf_alloc_raw &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[2b8]"></a>Api_ParseInfoElem</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, api_ioctl.o(i.Api_ParseInfoElem))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Freq2ieee
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_scan_info
</UL>

<P><STRONG><a name="[2bb]"></a>Api_RSNASuccessEvent</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_RSNASuccessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Api_RSNASuccessEvent &rArr; Custom_Api_RSNASuccessEvent &rArr; driver_unlock_mutex &rArr; rw_unlock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_rsna_4way_rx
</UL>

<P><STRONG><a name="[2bd]"></a>Api_ReadyEvent</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, api_wmi_rx.o(i.Api_ReadyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Api_ReadyEvent &rArr; Custom_Api_ReadyEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ReadyEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ready_event_rx
</UL>

<P><STRONG><a name="[3b1]"></a>Api_RegDomainEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, api_wmi_rx.o(i.Api_RegDomainEvent))
<BR><BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_regDomain_event_rx
</UL>

<P><STRONG><a name="[2bf]"></a>Api_RxComplete</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, api_txrx.o(i.Api_RxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Api_RxComplete &rArr; wmi_control_rx &rArr; wmi_disconnect_event_rx &rArr; Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_remove
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_DeliverFrameToNetworkStack
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxComplete
</UL>

<P><STRONG><a name="[2c7]"></a>Api_ScanCompleteEvent</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_ScanCompleteEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Api_ScanCompleteEvent &rArr; wmi_bssfilter_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanComplete_rx
</UL>

<P><STRONG><a name="[2c9]"></a>Api_SockResponseEventRx</STRONG> (Thumb, 762 bytes, Stack size 56 bytes, api_stack_offload.o(i.Api_SockResponseEventRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Api_SockResponseEventRx &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_socket_context
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_socket_context
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[2cd]"></a>Api_TargetStatsEvent</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, api_wmi_rx.o(i.Api_TargetStatsEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Api_TargetStatsEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_statsEvent_rx
</UL>

<P><STRONG><a name="[2ce]"></a>Api_TkipMicErrorEvent</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, api_wmi_rx.o(i.Api_TkipMicErrorEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Api_TkipMicErrorEvent &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_tkip_micerr_event_rx
</UL>

<P><STRONG><a name="[2cf]"></a>Api_TxComplete</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, api_txrx.o(i.Api_TxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Api_TxComplete &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxComplete
</UL>

<P><STRONG><a name="[2d1]"></a>Api_TxGetStatus</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, api_txrx.o(i.Api_TxGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Api_TxGetStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeDriver
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[2d3]"></a>Api_WMIInitFinish</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, api_init.o(i.Api_WMIInitFinish))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Api_WMIInitFinish &rArr; send_stack_init &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_stack_init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[2d7]"></a>Api_WmiTxStart</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, api_txrx.o(i.Api_WmiTxStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Api_WmiTxStart &rArr; Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>

<P><STRONG><a name="[2d9]"></a>Api_WpsProfileEvent</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, api_wmi_rx.o(i.Api_WpsProfileEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Api_WpsProfileEvent &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_cmd
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_profile_event_rx
</UL>

<P><STRONG><a name="[2db]"></a>Api_accept</STRONG> (Thumb, 610 bytes, Stack size 80 bytes, api_stack_offload.o(i.Api_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Api_accept &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_socket_context
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_accept
</UL>

<P><STRONG><a name="[2df]"></a>Api_bind</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, api_stack_offload.o(i.Api_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Api_bind &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bind
</UL>

<P><STRONG><a name="[2e0]"></a>Api_easyconfigEvent</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, api_wmi_rx.o(i.Api_easyconfigEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Api_easyconfigEvent &rArr; Custom_Api_easyconfigEvent &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_easyconfigEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_easyconfig_event_rx
</UL>

<P><STRONG><a name="[2e2]"></a>Api_ipconfig</STRONG> (Thumb, 326 bytes, Stack size 192 bytes, api_stack_offload.o(i.Api_ipconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Api_ipconfig &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
</UL>

<P><STRONG><a name="[2e3]"></a>Api_ipconfig_dhcp_pool</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, api_stack_offload.o(i.Api_ipconfig_dhcp_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Api_ipconfig_dhcp_pool &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig_dhcp_pool
</UL>

<P><STRONG><a name="[2e4]"></a>Api_ipconfig_set_tcp_exponential_backoff_retry</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, api_stack_offload.o(i.Api_ipconfig_set_tcp_exponential_backoff_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Api_ipconfig_set_tcp_exponential_backoff_retry &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ipconfig_set_tcp_exponential_backoff_retry
</UL>

<P><STRONG><a name="[2e5]"></a>Api_listen</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, api_stack_offload.o(i.Api_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Api_listen &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_listen
</UL>

<P><STRONG><a name="[2e6]"></a>Api_recvfrom</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, cust_api_stack_offload.o(i.Api_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Api_recvfrom &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_recvfrom
</UL>

<P><STRONG><a name="[2eb]"></a>Api_select</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, api_stack_offload.o(i.Api_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Api_select &rArr; blockForResponse &rArr; rw_pend_sem
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_queue_empty
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_select
</UL>

<P><STRONG><a name="[2ed]"></a>Api_shutdown</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, api_stack_offload.o(i.Api_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Api_shutdown &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isSocketBlocked
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_purge_queue
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_socket_context
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_shutdown
</UL>

<P><STRONG><a name="[2ef]"></a>Api_socket</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, api_stack_offload.o(i.Api_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Api_socket &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_socket_context
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_socket_context
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_socket
</UL>

<P><STRONG><a name="[2f2]"></a>Bus_InOutDescriptorSet</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, hw_api.o(i.Bus_InOutDescriptorSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_get_fragment
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_TransferData
</UL>

<P><STRONG><a name="[319]"></a>Bus_InOutToken</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, hw_api.o(i.Bus_InOutToken))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Bus_InOutToken
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PowerUpDown
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExternalReadDone
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
</UL>

<P><STRONG><a name="[298]"></a>Custom_Api_BssInfoEvent</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, cust_api_wmi_rx.o(i.Custom_Api_BssInfoEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Custom_Api_BssInfoEvent &rArr; fill_scan_info &rArr; Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_scan_info
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_BssInfoEvent
</UL>

<P><STRONG><a name="[29d]"></a>Custom_Api_ConnectEvent</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, cust_api_wmi_rx.o(i.Custom_Api_ConnectEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Custom_Api_ConnectEvent &rArr; driver_unlock_mutex &rArr; rw_unlock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Freq2ieee
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>

<P><STRONG><a name="[2ae]"></a>Custom_Api_DisconnectEvent</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, cust_api_wmi_rx.o(i.Custom_Api_DisconnectEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Custom_Api_DisconnectEvent &rArr; driver_unlock_mutex &rArr; rw_unlock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
</UL>

<P><STRONG><a name="[2bc]"></a>Custom_Api_RSNASuccessEvent</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, cust_api_wmi_rx.o(i.Custom_Api_RSNASuccessEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Custom_Api_RSNASuccessEvent &rArr; driver_unlock_mutex &rArr; rw_unlock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Freq2ieee
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RSNASuccessEvent
</UL>

<P><STRONG><a name="[2be]"></a>Custom_Api_ReadyEvent</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, cust_api_wmi_rx.o(i.Custom_Api_ReadyEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Custom_Api_ReadyEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ReadyEvent
</UL>

<P><STRONG><a name="[2fd]"></a>Custom_Api_Shutdown</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, cust_api_init.o(i.Custom_Api_Shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Custom_Api_Shutdown &rArr; Api_DeInitFinish &rArr; Driver_ContextDeInit &rArr; Custom_Driver_ContextDeInit &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDriverContextPtr
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_DestroyThread
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitStart
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_task
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
</UL>

<P><STRONG><a name="[302]"></a>Custom_Api_Start</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, cust_api_init.o(i.Custom_Api_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Custom_Api_Start &rArr; Driver_Init &rArr; Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDriverContextPtr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearDriverContextPtr
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_CreateThread
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitStart
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitFinish
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitStart
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[2e1]"></a>Custom_Api_easyconfigEvent</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, cust_api_wmi_rx.o(i.Custom_Api_easyconfigEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Custom_Api_easyconfigEvent &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_easyconfigEvent
</UL>

<P><STRONG><a name="[2c5]"></a>Custom_DeliverFrameToNetworkStack</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cust_api_stack_txrx.o(i.Custom_DeliverFrameToNetworkStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Custom_DeliverFrameToNetworkStack &rArr; custom_receive_tcpip &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
</UL>

<P><STRONG><a name="[309]"></a>Custom_Driver_ContextDeInit</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, cust_driver_main.o(i.Custom_Driver_ContextDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Custom_Driver_ContextDeInit &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_native_free_fn
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextDeInit
</UL>

<P><STRONG><a name="[30c]"></a>Custom_Driver_ContextInit</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cust_driver_main.o(i.Custom_Driver_ContextInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Custom_Driver_ContextInit &rArr; a_netbuf_alloc_raw &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_queue_init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_set_rx_pool
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
</UL>

<P><STRONG><a name="[306]"></a>Custom_Driver_CreateThread</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cust_driver_main.o(i.Custom_Driver_CreateThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Custom_Driver_CreateThread
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_task
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[300]"></a>Custom_Driver_DestroyThread</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cust_driver_main.o(i.Custom_Driver_DestroyThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Custom_Driver_DestroyThread &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[311]"></a>Custom_Driver_Interrupt_WakeDriver</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cust_driver_main.o(i.Custom_Driver_Interrupt_WakeDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Custom_Driver_Interrupt_WakeDriver &rArr; rw_post_drv_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_drv_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_InterruptHandler
</UL>

<P><STRONG><a name="[2a4]"></a>Custom_Driver_WaitForCondition</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, cust_driver_main.o(i.Custom_Driver_WaitForCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Custom_Driver_WaitForCondition &rArr; rw_pend_sem
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_pend_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxGetStatus
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitFinish
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[2d2]"></a>Custom_Driver_WakeDriver</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cust_driver_main.o(i.Custom_Driver_WakeDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxGetStatus
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_DestroyThread
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReportRxBuffStatus
</UL>

<P><STRONG><a name="[2b3]"></a>Custom_Driver_WakeUser</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cust_driver_main.o(i.Custom_Driver_WakeUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxComplete
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_credit_deficit
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ReadyEvent
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atheros_Driver_Task
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TargetStatsEvent
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ScanCompleteEvent
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_GetPmkEvent
</UL>

<P><STRONG><a name="[30a]"></a>Custom_GetRxRequest</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cust_driver_main.o(i.Custom_GetRxRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Custom_GetRxRequest &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_tailroom
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_init
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReportRxBuffStatus
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
</UL>

<P><STRONG><a name="[1d6]"></a>DRIVER_INT_HANDLE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cust_api_isr.o(i.DRIVER_INT_HANDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DRIVER_INT_HANDLE &rArr; HW_InterruptHandler &rArr; Custom_Driver_Interrupt_WakeDriver &rArr; rw_post_drv_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_InterruptHandler
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextByInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[31e]"></a>Driver_BootComm</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, driver_init.o(i.Driver_BootComm))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteDataDiag
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadDataDiag
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[322]"></a>Driver_CompleteRequest</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, driver_main.o(i.Driver_CompleteRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Driver_CompleteRequest &rArr; Hcd_UnmaskSPIInterrupts &rArr;  MaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[2ab]"></a>Driver_ContextDeInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, driver_init.o(i.Driver_ContextDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Driver_ContextDeInit &rArr; Custom_Driver_ContextDeInit &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
</UL>

<P><STRONG><a name="[2b6]"></a>Driver_ContextInit</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, driver_init.o(i.Driver_ContextInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Driver_ContextInit &rArr; Custom_Driver_ContextInit &rArr; a_netbuf_alloc_raw &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitStart
</UL>

<P><STRONG><a name="[2f1]"></a>Driver_DeInit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, driver_init.o(i.Driver_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Driver_DeInit &rArr; Hcd_Deinitialize &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PowerUpDown
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_DeInit
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_shutdown
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_deinit
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Deinitialize
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atheros_Driver_Task
</UL>

<P><STRONG><a name="[32a]"></a>Driver_DropTxDataPackets</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, driver_main.o(i.Driver_DropTxDataPackets))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Driver_DropTxDataPackets &rArr; Driver_CompleteRequest &rArr; Hcd_UnmaskSPIInterrupts &rArr;  MaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_CompleteRequest
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[32f]"></a>Driver_GetTargetInfo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, driver_init.o(i.Driver_GetTargetInfo))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[305]"></a>Driver_Init</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, driver_init.o(i.Driver_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Driver_Init &rArr; Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PowerUpDown
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_Init
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_WaitTarget
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_Start
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_GetTargetInfo
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[2f0]"></a>Driver_Main</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, driver_main.o(i.Driver_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_dequeue
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ClearCPUInterrupt
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_CompleteRequest
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atheros_Driver_Task
</UL>

<P><STRONG><a name="[31f]"></a>Driver_ReadDataDiag</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, driver_diag.o(i.Driver_ReadDataDiag))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Driver_ReadDataDiag &rArr; Driver_ReadRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadRegDiag
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
</UL>

<P><STRONG><a name="[33c]"></a>Driver_ReadRegDiag</STRONG> (Thumb, 94 bytes, Stack size 104 bytes, driver_diag.o(i.Driver_ReadRegDiag))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Driver_ReadRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SetAddressWindowRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadDataDiag
</UL>

<P><STRONG><a name="[339]"></a>Driver_RecvPacket</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, driver_txrx.o(i.Driver_RecvPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Driver_RecvPacket &rArr; Hcd_Request &rArr; DoDMAOp &rArr; MaskSPIInterrupts &rArr; Hcd_UnmaskSPIInterrupts &rArr;  MaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_PrepareRecvPacket
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Request
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetMboxAddress
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_PostProcessRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[312]"></a>Driver_ReportRxBuffStatus</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, driver_main.o(i.Driver_ReportRxBuffStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>

<P><STRONG><a name="[16c]"></a>Driver_RxComplete</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, driver_txrx.o(i.Driver_RxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Driver_RxComplete &rArr; Api_RxComplete &rArr; wmi_control_rx &rArr; wmi_disconnect_event_rx &rArr; Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_RxComplete
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> driver_main.o(i.Driver_RxReady)
</UL>
<P><STRONG><a name="[338]"></a>Driver_RxReady</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, driver_main.o(i.Driver_RxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Driver_RxReady &rArr; Hcd_GetLookAhead &rArr; DoPioReadInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetLookAhead
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioInternalAccess
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[33b]"></a>Driver_SendPacket</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, driver_txrx.o(i.Driver_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Driver_SendPacket &rArr; Hcd_Request &rArr; DoDMAOp &rArr; MaskSPIInterrupts &rArr; Hcd_UnmaskSPIInterrupts &rArr;  MaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Request
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetMboxAddress
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_PostProcessRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[2a9]"></a>Driver_SubmitTxRequest</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, driver_txrx.o(i.Driver_SubmitTxRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Driver_SubmitTxRequest &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeDriver
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WmiTxStart
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[2d8]"></a>Driver_SubmitTxRequestNoBlock</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, driver_txrx.o(i.Driver_SubmitTxRequestNoBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Driver_SubmitTxRequestNoBlock &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WmiTxStart
</UL>

<P><STRONG><a name="[33a]"></a>Driver_TxReady</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, driver_main.o(i.Driver_TxReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_GetCreditCounterUpdate
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_RefreshWriteBufferSpace
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[320]"></a>Driver_WriteDataDiag</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, driver_diag.o(i.Driver_WriteDataDiag))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteRegDiag
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
</UL>

<P><STRONG><a name="[351]"></a>Driver_WriteRegDiag</STRONG> (Thumb, 94 bytes, Stack size 104 bytes, driver_diag.o(i.Driver_WriteRegDiag))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SetAddressWindowRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteDataDiag
</UL>

<P><STRONG><a name="[315]"></a>GetDriverContextByInterrupt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cust_api_init.o(i.GetDriverContextByInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_INT_HANDLE
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>

<P><STRONG><a name="[2fe]"></a>GetDriverContextPtr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cust_api_init.o(i.GetDriverContextPtr))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_socket
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_shutdown
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_select
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_recvfrom
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_listen
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig_dhcp_pool
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bind
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_accept
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[2f7]"></a>HTC_ConnectService</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, htc.o(i.HTC_ConnectService))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HTC_ConnectService &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_WaitTarget
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectService
</UL>

<P><STRONG><a name="[337]"></a>HTC_ProcessCpuInterrupt</STRONG> (Thumb, 94 bytes, Stack size 104 bytes, htc.o(i.HTC_ProcessCpuInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HTC_ProcessCpuInterrupt &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_DistributeCredits
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[334]"></a>HTC_Start</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, htc.o(i.HTC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HTC_Start &rArr; Hcd_UnmaskSPIInterrupts &rArr;  MaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_DistributeCredits
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[332]"></a>HTC_WaitTarget</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, htc.o(i.HTC_WaitTarget))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HTC_WaitTarget &rArr; HTC_ConnectService &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ConnectService
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[327]"></a>HW_DeInit</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, hw_api.o(i.HW_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[352]"></a>HW_EnableDisableSPIIRQ</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, hw_api.o(i.HW_EnableDisableSPIIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HW_EnableDisableSPIIRQ &rArr; rw_unlock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_InterruptHandler
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
</UL>

<P><STRONG><a name="[32d]"></a>HW_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hw_api.o(i.HW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[316]"></a>HW_InterruptHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hw_api.o(i.HW_InterruptHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HW_InterruptHandler &rArr; Custom_Driver_Interrupt_WakeDriver &rArr; rw_post_drv_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_Interrupt_WakeDriver
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnableDisableSPIIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRIVER_INT_HANDLE
</UL>

<P><STRONG><a name="[2af]"></a>HW_MsecDelay</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hw_api.o(i.HW_MsecDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HW_MsecDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_PowerUpDown
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Atheros_Driver_Task
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
</UL>

<P><STRONG><a name="[326]"></a>HW_PowerUpDown</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hw_api.o(i.HW_PowerUpDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HW_PowerUpDown &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[336]"></a>Hcd_ClearCPUInterrupt</STRONG> (Thumb, 64 bytes, Stack size 96 bytes, spi_hcd.o(i.Hcd_ClearCPUInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Hcd_ClearCPUInterrupt &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[325]"></a>Hcd_Deinitialize</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi_hcd.o(i.Hcd_Deinitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Hcd_Deinitialize &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[33f]"></a>Hcd_DoPioExternalAccess</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_DoPioExternalAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_TransferData
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExternalReadDone
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteRegDiag
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadRegDiag
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SetAddressWindowRegister
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ClearCPUInterrupt
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
</UL>

<P><STRONG><a name="[346]"></a>Hcd_DoPioInternalAccess</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_DoPioInternalAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Hcd_DoPioInternalAccess &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
</UL>

<P><STRONG><a name="[347]"></a>Hcd_GetLookAhead</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, spi_hcd.o(i.Hcd_GetLookAhead))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Hcd_GetLookAhead &rArr; DoPioReadInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
</UL>

<P><STRONG><a name="[341]"></a>Hcd_GetMboxAddress</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_GetMboxAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Hcd_GetMboxAddress &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
</UL>

<P><STRONG><a name="[32e]"></a>Hcd_Init</STRONG> (Thumb, 382 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Hcd_Init &rArr; ResetWriteBufferWaterMark &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWriteBufferWaterMark
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[350]"></a>Hcd_ProgramWriteBufferWaterMark</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, spi_hcd.o(i.Hcd_ProgramWriteBufferWaterMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Hcd_ProgramWriteBufferWaterMark &rArr; ResetWriteBufferWaterMark &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWriteBufferWaterMark
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[34f]"></a>Hcd_RefreshWriteBufferSpace</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spi_hcd.o(i.Hcd_RefreshWriteBufferSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Hcd_RefreshWriteBufferSpace &rArr; DoPioReadInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[342]"></a>Hcd_Request</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, spi_hcd.o(i.Hcd_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Hcd_Request &rArr; DoDMAOp &rArr; MaskSPIInterrupts &rArr; Hcd_UnmaskSPIInterrupts &rArr;  MaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureByteSwap
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
</UL>

<P><STRONG><a name="[335]"></a>Hcd_SpiInterrupt</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, spi_hcd.o(i.Hcd_SpiInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Hcd_SpiInterrupt &rArr; MaskSPIInterrupts &rArr; Hcd_UnmaskSPIInterrupts &rArr;  MaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWriteBufferWaterMark
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioReadInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[31c]"></a>Hcd_UnmaskSPIInterrupts</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_hcd.o(i.Hcd_UnmaskSPIInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = Hcd_UnmaskSPIInterrupts &rArr;  MaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_Start
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_CompleteRequest
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[34e]"></a>Htc_GetCreditCounterUpdate</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, htc.o(i.Htc_GetCreditCounterUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[340]"></a>Htc_PrepareRecvPacket</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, htc.o(i.Htc_PrepareRecvPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Htc_PrepareRecvPacket &rArr; a_netbuf_put &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
</UL>

<P><STRONG><a name="[344]"></a>Htc_ProcessRecvHeader</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, htc.o(i.Htc_ProcessRecvHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Htc_ProcessRecvHeader &rArr; Htc_ProcessTrailer &rArr; Htc_ProcessCreditRpt &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTrailer
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_trim
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxComplete
</UL>

<P><STRONG><a name="[34c]"></a>Htc_ProcessTxComplete</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, htc.o(i.Htc_ProcessTxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Htc_ProcessTxComplete &rArr; a_netbuf_pull &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxComplete
</UL>

<P><STRONG><a name="[356]"></a>Htc_ReadCreditCounter</STRONG> (Thumb, 80 bytes, Stack size 104 bytes, htc.o(i.Htc_ReadCreditCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_credit_deficit
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_GetCreditCounterUpdate
</UL>

<P><STRONG><a name="[345]"></a>Htc_RxComplete</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, htc.o(i.Htc_RxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Htc_RxComplete &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxComplete
</UL>

<P><STRONG><a name="[348]"></a>Htc_SendPacket</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, htc.o(i.Htc_SendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Htc_SendPacket &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
</UL>

<P><STRONG><a name="[2a8]"></a>Util_AC2EndpointID</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, util.o(i.Util_AC2EndpointID))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[2b9]"></a>Util_Freq2ieee</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, util.o(i.Util_Freq2ieee))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
</UL>

<P><STRONG><a name="[34d]"></a>Util_GetEndpoint</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, util.o(i.Util_GetEndpoint))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ConnectService
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessCreditRpt
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_GetCreditCounterUpdate
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[383]"></a>Util_Ieee2freq</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, util.o(i.Util_Ieee2freq))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[1a4]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[36f]"></a>_ascii_to_hex</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rw_lib.o(i._ascii_to_hex))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_str_pmk
</UL>

<P><STRONG><a name="[191]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[323]"></a>a_free</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextByInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_deinit
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextDeInit
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_deinit
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_free
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_alloc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_socket_context
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_shutdown
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_native_free_fn
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc_raw
</UL>

<P><STRONG><a name="[324]"></a>a_malloc</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextByInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_alloc
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc_raw
</UL>

<P><STRONG><a name="[303]"></a>a_malloc_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_malloc_init))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[370]"></a>a_netbuf_alloc</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = a_netbuf_alloc &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_alloc
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>

<P><STRONG><a name="[30e]"></a>a_netbuf_alloc_raw</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_alloc_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = a_netbuf_alloc_raw &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
</UL>

<P><STRONG><a name="[33d]"></a>a_netbuf_configure</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, cust_driver_netbuf.o(i.a_netbuf_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = a_netbuf_configure &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteRegDiag
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadRegDiag
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SetAddressWindowRegister
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ClearCPUInterrupt
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
</UL>

<P><STRONG><a name="[2e8]"></a>a_netbuf_dequeue</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, driver_netbuf.o(i.a_netbuf_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_recvfrom
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>

<P><STRONG><a name="[310]"></a>a_netbuf_enqueue</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, driver_netbuf.o(i.a_netbuf_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
</UL>

<P><STRONG><a name="[2c6]"></a>a_netbuf_free</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_tx_pool
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free_rx_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_accept
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_recvfrom
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_purge_queue
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_RxComplete
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxComplete
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>

<P><STRONG><a name="[371]"></a>a_netbuf_free_rx_pool</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_netbuf_free_rx_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReportRxBuffStatus
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
</UL>

<P><STRONG><a name="[372]"></a>a_netbuf_free_tx_pool</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_free_tx_pool))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
</UL>

<P><STRONG><a name="[2f3]"></a>a_netbuf_get_fragment</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_get_fragment))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = a_netbuf_get_fragment
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutDescriptorSet
</UL>

<P><STRONG><a name="[38c]"></a>a_netbuf_headroom</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_headroom))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
</UL>

<P><STRONG><a name="[313]"></a>a_netbuf_init</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, cust_driver_netbuf.o(i.a_netbuf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = a_netbuf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>

<P><STRONG><a name="[2ea]"></a>a_netbuf_pull</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_pull))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = a_netbuf_pull &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_recvfrom
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTxComplete
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_remove
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[2ee]"></a>a_netbuf_purge_queue</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_netbuf_purge_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = a_netbuf_purge_queue &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
</UL>

<P><STRONG><a name="[349]"></a>a_netbuf_push</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = a_netbuf_push &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_meta_add
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>

<P><STRONG><a name="[357]"></a>a_netbuf_put</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_netbuf_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = a_netbuf_put &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextByInterrupt
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_PrepareRecvPacket
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put_data
</UL>

<P><STRONG><a name="[373]"></a>a_netbuf_put_data</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cust_driver_netbuf.o(i.a_netbuf_put_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = a_netbuf_put_data &rArr; a_netbuf_put &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
</UL>

<P><STRONG><a name="[30d]"></a>a_netbuf_queue_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, driver_netbuf.o(i.a_netbuf_queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
</UL>

<P><STRONG><a name="[374]"></a>a_netbuf_reinit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_reinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = a_netbuf_reinit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
</UL>

<P><STRONG><a name="[30f]"></a>a_netbuf_set_rx_pool</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_set_rx_pool))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextInit
</UL>

<P><STRONG><a name="[314]"></a>a_netbuf_tailroom</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_tailroom))
<BR><BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
</UL>

<P><STRONG><a name="[2c1]"></a>a_netbuf_to_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cust_driver_netbuf.o(i.a_netbuf_to_data))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_get_fragment
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_recvfrom
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_implicit_create_pstream
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_meta_add
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>

<P><STRONG><a name="[2c2]"></a>a_netbuf_to_len</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, cust_driver_netbuf.o(i.a_netbuf_to_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = a_netbuf_to_len
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_recvfrom
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_RxComplete
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
</UL>

<P><STRONG><a name="[359]"></a>a_netbuf_trim</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.a_netbuf_trim))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = a_netbuf_trim &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
</UL>

<P><STRONG><a name="[25a]"></a>accept</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, rw_lib.o(i.accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = accept &rArr; t_accept &rArr; Api_accept &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_accept
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_TCPSERVERWAIT_Fnction
</UL>

<P><STRONG><a name="[329]"></a>aggr_deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rcv_aggr.o(i.aggr_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[331]"></a>aggr_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rcv_aggr.o(i.aggr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aggr_init &rArr; aggr_reset_state &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_reset_state
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[294]"></a>aggr_recv_addba_req_evt</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rcv_aggr.o(i.aggr_recv_addba_req_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aggr_recv_addba_req_evt &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_AggrRecvAddbaReqEvent
</UL>

<P><STRONG><a name="[296]"></a>aggr_recv_delba_req_evt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rcv_aggr.o(i.aggr_recv_delba_req_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aggr_recv_delba_req_evt &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_AggrRecvDelbaReqEvent
</UL>

<P><STRONG><a name="[29c]"></a>aggr_reset_state</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rcv_aggr.o(i.aggr_reset_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = aggr_reset_state &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>

<P><STRONG><a name="[2c4]"></a>assert_func</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rw_lib.o(i.assert_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clean_filename
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetDriverContextPtr
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutDescriptorSet
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ContextInit
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_SendPacket
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_RxComplete
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetMboxAddress
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxComplete
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxComplete
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_control_ep
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ConnectService
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TargReset
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_implicit_create_pstream
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_remove
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTrailer
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessCreditRpt
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExternalReadDone
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureByteSwap
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_GetCreditCounterUpdate
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetLookAhead
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_TxReady
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RxReady
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_CompleteRequest
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_reset_state
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_recv_delba_req_evt
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aggr_recv_addba_req_evt
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_trim
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_GetRxRequest
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_meta_add
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_errorEvent_rx
</UL>

<P><STRONG><a name="[35c]"></a>ath_ioctl_handler</STRONG> (Thumb, 2106 bytes, Stack size 248 bytes, cust_api_ioctl.o(i.ath_ioctl_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_stats_cmd
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_power_mode_cmd
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_pmk_cmd
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_Ieee2freq
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WaitForCondition
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxGetStatus
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectWiFi
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getLibVersion
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getMacAddr
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanGetScanInfo
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanNetworkScan
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_str_pmk
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_scan
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_power
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_channel
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ap_params
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_PowerParam
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_sec_type
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_pmk
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_passphrase
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_mode
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_essid
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_cipher
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_bssid
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_commit
</UL>

<P><STRONG><a name="[256]"></a>bind</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rw_lib.o(i.bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = bind &rArr; t_bind &rArr; Api_bind &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_bind
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_OPENTCPSERVER_Fnction
</UL>

<P><STRONG><a name="[2de]"></a>blockForResponse</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, cust_api_stack_offload.o(i.blockForResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = blockForResponse &rArr; rw_pend_sem
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_pend_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_select
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_listen
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_accept
</UL>

<P><STRONG><a name="[2cb]"></a>clear_socket_context</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, api_stack_offload.o(i.clear_socket_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clear_socket_context &rArr; a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
</UL>

<P><STRONG><a name="[258]"></a>close</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rw_lib.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = close &rArr; shutdown &rArr; t_shutdown &rArr; Api_shutdown &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_TCPSERVERWAIT_Fnction
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_OPENTCPSERVER_Fnction
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_CLOSERTCPSERVER_Fnction
</UL>

<P><STRONG><a name="[389]"></a>custom_header_alloc</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, cust_api_stack_offload.o(i.custom_header_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = custom_header_alloc &rArr; a_netbuf_alloc &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>

<P><STRONG><a name="[38a]"></a>custom_header_free</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cust_api_stack_offload.o(i.custom_header_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = custom_header_free &rArr; a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>

<P><STRONG><a name="[368]"></a>custom_ipconfig_set_tcp_exponential_backoff_retry</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cust_api_stack_offload.o(i.custom_ipconfig_set_tcp_exponential_backoff_retry))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = custom_ipconfig_set_tcp_exponential_backoff_retry &rArr; Api_ipconfig_set_tcp_exponential_backoff_retry &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_TcpBackoffRetry
</UL>

<P><STRONG><a name="[2ec]"></a>custom_queue_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cust_api_stack_offload.o(i.custom_queue_empty))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_select
</UL>

<P><STRONG><a name="[308]"></a>custom_receive_tcpip</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, cust_api_stack_txrx.o(i.custom_receive_tcpip))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = custom_receive_tcpip &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_socket_context
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_enqueue
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_DeliverFrameToNetworkStack
</UL>

<P><STRONG><a name="[38b]"></a>custom_send_tcpip</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, cust_api_stack_txrx.o(i.custom_send_tcpip))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = custom_send_tcpip &rArr; Api_DataTxStart &rArr; wmi_data_hdr_add &rArr; wmi_meta_add &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put_data
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_headroom
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>

<P><STRONG><a name="[38d]"></a>custom_socket_context_deinit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.custom_socket_context_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = custom_socket_context_deinit &rArr; a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_sem
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_deinit
</UL>

<P><STRONG><a name="[38e]"></a>custom_socket_context_init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.custom_socket_context_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = custom_socket_context_init &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_queue_init
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_sem
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_context_init
</UL>

<P><STRONG><a name="[30b]"></a>default_native_free_fn</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, cust_driver_netbuf.o(i.default_native_free_fn))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = default_native_free_fn &rArr; txpkt_free &rArr; unblock &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_ContextDeInit
</UL>

<P><STRONG><a name="[2ca]"></a>find_socket_context</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, api_stack_offload.o(i.find_socket_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_socket_context
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_accept
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
</UL>

<P><STRONG><a name="[2dc]"></a>isSocketBlocked</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cust_api_stack_offload.o(i.isSocketBlocked))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_select
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_listen
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_dhcp_pool
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_accept
</UL>

<P><STRONG><a name="[257]"></a>listen</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rw_lib.o(i.listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = listen &rArr; t_listen &rArr; Api_listen &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_listen
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_OPENTCPSERVER_Fnction
</UL>

<P><STRONG><a name="[25b]"></a>recv</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, rw_lib.o(i.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = recv &rArr; t_recvfrom &rArr; Api_recvfrom &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_recvfrom
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_TCPSERVERREC_Fnction
</UL>

<P><STRONG><a name="[24d]"></a>rw_getLibVersion</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, rw_lib.o(i.rw_getLibVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = rw_getLibVersion &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskWIFI
</UL>

<P><STRONG><a name="[24e]"></a>rw_getMacAddr</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i.rw_getMacAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = rw_getMacAddr &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskWIFI
</UL>

<P><STRONG><a name="[254]"></a>rw_ipConfig</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, rw_lib.o(i.rw_ipConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = rw_ipConfig &rArr; t_ipconfig &rArr; Api_ipconfig &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig_dhcp_pool
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_ipconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GETIP_Fnction
</UL>

<P><STRONG><a name="[24c]"></a>rw_sysDriverInit</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, rw_lib.o(i.rw_sysDriverInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = rw_sysDriverInit &rArr; _set_PowerParam &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_power
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_TcpBackoffRetry
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_PowerParam
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_sys_params
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskWIFI
</UL>

<P><STRONG><a name="[253]"></a>rw_sysDriverReset</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rw_lib.o(i.rw_sysDriverReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = rw_sysDriverReset &rArr; Custom_Api_Start &rArr; Driver_Init &rArr; Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_sys_params
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_DISCONNECT_Fnction
</UL>

<P><STRONG><a name="[399]"></a>rw_sysSleep</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rw_lib.o(i.rw_sysSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rw_sysSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[252]"></a>rw_wlanConnect</STRONG> (Thumb, 724 bytes, Stack size 64 bytes, rw_lib.o(i.rw_wlanConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = rw_wlanConnect &rArr; _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanGetScanInfo
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_str_pmk
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_scan
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ctycode
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_channel
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_sec_type
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_pmk
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_passphrase
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_mode
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_essid
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_cipher
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_bssid
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_commit
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_CONNECT_Fnction
</UL>

<P><STRONG><a name="[251]"></a>rw_wlanGetScanInfo</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, rw_lib.o(i.rw_wlanGetScanInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = rw_wlanGetScanInfo &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SCAN_Fnction
</UL>

<P><STRONG><a name="[250]"></a>rw_wlanNetworkScan</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, rw_lib.o(i.rw_wlanNetworkScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = rw_wlanNetworkScan &rArr; _ath_set_essid &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ath_set_essid
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SCAN_Fnction
</UL>

<P><STRONG><a name="[259]"></a>select</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rw_lib.o(i.select))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = select &rArr; t_select &rArr; Api_select &rArr; blockForResponse &rArr; rw_pend_sem
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_select
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_TCPSERVERWAIT_Fnction
</UL>

<P><STRONG><a name="[25c]"></a>send</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, rw_lib.o(i.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = send &rArr; t_send &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; wmi_data_hdr_add &rArr; wmi_meta_add &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_send
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysSleep
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_TCPSERVERSED_Fnction
</UL>

<P><STRONG><a name="[2d6]"></a>send_stack_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, api_stack_offload.o(i.send_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = send_stack_init &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
</UL>

<P><STRONG><a name="[388]"></a>shutdown</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rw_lib.o(i.shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = shutdown &rArr; t_shutdown &rArr; Api_shutdown &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_shutdown
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fd_invaild
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[255]"></a>socket</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rw_lib.o(i.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = socket &rArr; t_socket &rArr; Api_socket &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_OPENTCPSERVER_Fnction
</UL>

<P><STRONG><a name="[2ac]"></a>socket_context_deinit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, api_stack_offload.o(i.socket_context_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = socket_context_deinit &rArr; custom_socket_context_deinit &rArr; a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DeInitFinish
</UL>

<P><STRONG><a name="[2b7]"></a>socket_context_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, api_stack_offload.o(i.socket_context_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = socket_context_init &rArr; custom_socket_context_init &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_socket_context_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_InitStart
</UL>

<P><STRONG><a name="[376]"></a>t_accept</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = t_accept &rArr; Api_accept &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_accept
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[387]"></a>t_bind</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = t_bind &rArr; Api_bind &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>

<P><STRONG><a name="[391]"></a>t_ipconfig</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, cust_api_stack_offload.o(i.t_ipconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = t_ipconfig &rArr; Api_ipconfig &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ipConfig
</UL>

<P><STRONG><a name="[392]"></a>t_ipconfig_dhcp_pool</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_ipconfig_dhcp_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = t_ipconfig_dhcp_pool &rArr; Api_ipconfig_dhcp_pool &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_dhcp_pool
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ipConfig
</UL>

<P><STRONG><a name="[38f]"></a>t_listen</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = t_listen &rArr; Api_listen &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_listen
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>

<P><STRONG><a name="[390]"></a>t_recvfrom</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, cust_api_stack_offload.o(i.t_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = t_recvfrom &rArr; Api_recvfrom &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_recvfrom
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[397]"></a>t_select</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = t_select &rArr; Api_select &rArr; blockForResponse &rArr; rw_pend_sem
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_select
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[398]"></a>t_send</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, cust_api_stack_offload.o(i.t_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = t_send &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; wmi_data_hdr_add &rArr; wmi_meta_add &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[39c]"></a>t_sendto</STRONG> (Thumb, 498 bytes, Stack size 192 bytes, cust_api_stack_offload.o(i.t_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; wmi_data_hdr_add &rArr; wmi_meta_add &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_send_tcpip
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_free
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_header_alloc
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blockForResponse
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_unlock_mutex
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_lock_mutex
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_send
</UL>

<P><STRONG><a name="[39a]"></a>t_shutdown</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cust_api_stack_offload.o(i.t_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = t_shutdown &rArr; Api_shutdown &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>

<P><STRONG><a name="[39b]"></a>t_socket</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.t_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = t_socket &rArr; Api_socket &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DriverAccessCheck
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDriverContextPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[2d0]"></a>txpkt_free</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.txpkt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = txpkt_free &rArr; unblock &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_reinit
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unblock
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxComplete
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_native_free_fn
</UL>

<P><STRONG><a name="[2cc]"></a>unblock</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cust_api_stack_offload.o(i.unblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = unblock &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_post_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txpkt_free
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_receive_tcpip
</UL>

<P><STRONG><a name="[2d5]"></a>wmi_allow_aggr_cmd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wmi.o(i.wmi_allow_aggr_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_allow_aggr_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
</UL>

<P><STRONG><a name="[2a2]"></a>wmi_ap_profile_commit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wmi.o(i.wmi_ap_profile_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_ap_profile_commit &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
</UL>

<P><STRONG><a name="[385]"></a>wmi_ap_set_param</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, wmi.o(i.wmi_ap_set_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_ap_set_param &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[2c8]"></a>wmi_bssfilter_cmd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wmi.o(i.wmi_bssfilter_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_bssfilter_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ScanCompleteEvent
</UL>

<P><STRONG><a name="[39e]"></a>wmi_cmd_send</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, wmi.o(i.wmi_cmd_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WmiTxStart
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_storerecall_configure_cmd
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_allow_aggr_cmd
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_start_cmd
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_startscan_cmd
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_pmk_cmd
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_passphrase_cmd
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_ht_cap_cmd
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channel_cmd
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_channelParams_cmd
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanparams_cmd
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_promiscuous_cmd
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_probedSsid_cmd
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_powermode_cmd
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_pmparams_cmd
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_listeninterval_cmd
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssfilter_cmd
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_set_param
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_socket_cmd
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_cmd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ap_profile_commit
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>

<P><STRONG><a name="[2a1]"></a>wmi_connect_cmd</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, wmi.o(i.wmi_connect_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wmi_connect_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
</UL>

<P><STRONG><a name="[2c0]"></a>wmi_control_rx</STRONG> (Thumb, 636 bytes, Stack size 64 bytes, wmi.o(i.wmi_control_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = wmi_control_rx &rArr; wmi_disconnect_event_rx &rArr; Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_len
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_free
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_SockResponseEventRx
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_wps_profile_event_rx
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_tkip_micerr_event_rx
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_statsEvent_rx
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_scanComplete_rx
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_rsna_4way_rx
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_regDomain_event_rx
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_ready_event_rx
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_pmk_event_rx
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_errorEvent_rx
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_easyconfig_event_rx
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_event_rx
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_delba_req_event_rx
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_connect_event_rx
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_bssInfo_event_rx
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_addba_req_event_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
</UL>

<P><STRONG><a name="[2a6]"></a>wmi_data_hdr_add</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, wmi.o(i.wmi_data_hdr_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wmi_data_hdr_add &rArr; wmi_meta_add &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_meta_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[2c3]"></a>wmi_data_hdr_remove</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wmi.o(i.wmi_data_hdr_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wmi_data_hdr_remove &rArr; a_netbuf_pull &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_pull
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RxComplete
</UL>

<P><STRONG><a name="[2b1]"></a>wmi_disconnect_cmd</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, wmi.o(i.wmi_disconnect_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectWiFi
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TkipMicErrorEvent
</UL>

<P><STRONG><a name="[37d]"></a>wmi_get_pmk_cmd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wmi.o(i.wmi_get_pmk_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_get_pmk_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[384]"></a>wmi_get_power_mode_cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wmi.o(i.wmi_get_power_mode_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[37b]"></a>wmi_get_stats_cmd</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wmi.o(i.wmi_get_stats_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_get_stats_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_simple_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[2a7]"></a>wmi_implicit_create_pstream</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, wmi.o(i.wmi_implicit_create_pstream))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wmi_implicit_create_pstream &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_determine_userPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DataTxStart
</UL>

<P><STRONG><a name="[330]"></a>wmi_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wmi.o(i.wmi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wmi_init &rArr; a_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_malloc
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_qos_state_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_creat_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[378]"></a>wmi_listeninterval_cmd</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wmi.o(i.wmi_listeninterval_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_listeninterval_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[3ad]"></a>wmi_meta_add</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, wmi.o(i.wmi_meta_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wmi_meta_add &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_data_hdr_add
</UL>

<P><STRONG><a name="[377]"></a>wmi_pmparams_cmd</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, wmi.o(i.wmi_pmparams_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wmi_pmparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[2da]"></a>wmi_powermode_cmd</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wmi.o(i.wmi_powermode_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_powermode_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
</UL>

<P><STRONG><a name="[381]"></a>wmi_probedSsid_cmd</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, wmi.o(i.wmi_probedSsid_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wmi_probedSsid_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[386]"></a>wmi_promiscuous_cmd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wmi.o(i.wmi_promiscuous_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_promiscuous_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[3b0]"></a>wmi_qos_state_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wmi.o(i.wmi_qos_state_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wmi_qos_state_init &rArr; rw_unlock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_init
</UL>

<P><STRONG><a name="[2a0]"></a>wmi_scanparams_cmd</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, wmi.o(i.wmi_scanparams_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
</UL>

<P><STRONG><a name="[379]"></a>wmi_set_channelParams_cmd</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, wmi.o(i.wmi_set_channelParams_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = wmi_set_channelParams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[37f]"></a>wmi_set_channel_cmd</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wmi.o(i.wmi_set_channel_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_set_channel_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[2f8]"></a>wmi_set_control_ep</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wmi.o(i.wmi_set_control_ep))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wmi_set_control_ep &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectService
</UL>

<P><STRONG><a name="[37a]"></a>wmi_set_ht_cap_cmd</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, wmi.o(i.wmi_set_ht_cap_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_set_ht_cap_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[380]"></a>wmi_set_passphrase_cmd</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, wmi.o(i.wmi_set_passphrase_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_set_passphrase_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[37c]"></a>wmi_set_pmk_cmd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wmi.o(i.wmi_set_pmk_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_set_pmk_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[328]"></a>wmi_shutdown</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wmi.o(i.wmi_shutdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wmi_shutdown &rArr; a_free
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_free
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_del_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
</UL>

<P><STRONG><a name="[2dd]"></a>wmi_socket_cmd</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, wmi.o(i.wmi_socket_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_stack_init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_socket
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_shutdown
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_listen
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_set_tcp_exponential_backoff_retry
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig_dhcp_pool
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ipconfig
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_bind
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_accept
</UL>

<P><STRONG><a name="[382]"></a>wmi_startscan_cmd</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, wmi.o(i.wmi_startscan_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wmi_startscan_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[2d4]"></a>wmi_storerecall_configure_cmd</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wmi.o(i.wmi_storerecall_configure_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_storerecall_configure_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WMIInitFinish
</UL>

<P><STRONG><a name="[37e]"></a>wmi_wps_start_cmd</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wmi.o(i.wmi_wps_start_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wmi_wps_start_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_to_data
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_put
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>

<P><STRONG><a name="[17b]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[9a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[176]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[3f0]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[3f1]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[172]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[35b]"></a>_ath_commit</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rw_lib.o(i._ath_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _ath_commit &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[35d]"></a>_ath_set_bssid</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i._ath_set_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _ath_set_bssid &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[35e]"></a>_ath_set_cipher</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i._ath_set_cipher))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _ath_set_cipher &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[35f]"></a>_ath_set_essid</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, rw_lib.o(i._ath_set_essid))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = _ath_set_essid &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanNetworkScan
</UL>

<P><STRONG><a name="[360]"></a>_ath_set_mode</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, rw_lib.o(i._ath_set_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = _ath_set_mode &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[361]"></a>_ath_set_passphrase</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, rw_lib.o(i._ath_set_passphrase))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = _ath_set_passphrase &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[362]"></a>_ath_set_pmk</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rw_lib.o(i._ath_set_pmk))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _ath_set_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[363]"></a>_ath_set_sec_type</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, rw_lib.o(i._ath_set_sec_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = _ath_set_sec_type &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[375]"></a>_check_fd_invaild</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rw_lib.o(i._check_fd_invaild))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>

<P><STRONG><a name="[364]"></a>_check_sys_params</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, rw_lib.o(i._check_sys_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _check_sys_params &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[365]"></a>_clean_filename</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rw_lib.o(i._clean_filename))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>

<P><STRONG><a name="[366]"></a>_set_PowerParam</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, rw_lib.o(i._set_PowerParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = _set_PowerParam &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[367]"></a>_set_TcpBackoffRetry</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rw_lib.o(i._set_TcpBackoffRetry))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _set_TcpBackoffRetry &rArr; custom_ipconfig_set_tcp_exponential_backoff_retry &rArr; Api_ipconfig_set_tcp_exponential_backoff_retry &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_ipconfig_set_tcp_exponential_backoff_retry
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[369]"></a>_set_ap_params</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, rw_lib.o(i._set_ap_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = _set_ap_params &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ctycode
</UL>

<P><STRONG><a name="[36a]"></a>_set_channel</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, rw_lib.o(i._set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = _set_channel &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[36b]"></a>_set_ctycode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rw_lib.o(i._set_ctycode))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = _set_ctycode &rArr; _set_ap_params &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_ap_params
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[36c]"></a>_set_power</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, rw_lib.o(i._set_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = _set_power &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
</UL>

<P><STRONG><a name="[36d]"></a>_set_scan</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, rw_lib.o(i._set_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = _set_scan &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[36e]"></a>_set_str_pmk</STRONG> (Thumb, 114 bytes, Stack size 64 bytes, rw_lib.o(i._set_str_pmk))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ath_ioctl_handler
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ascii_to_hex
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>

<P><STRONG><a name="[14e]"></a>svcRtxKernelGetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[14f]"></a>svcRtxKernelGetSysTimerCount</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelGetSysTimerCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcRtxKernelGetSysTimerCount
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetOverflow
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetInterval
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetSysTimerCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetSysTimerCount)
</UL>
<P><STRONG><a name="[150]"></a>svcRtxKernelGetSysTimerFreq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetSysTimerFreq))
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetSysTimerFreq)
</UL>
<P><STRONG><a name="[151]"></a>svcRtxKernelGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickCount))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickCount)
</UL>
<P><STRONG><a name="[152]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[153]"></a>svcRtxKernelStart</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[27e]"></a>ThreadFlagsCheck</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsWait
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadFlagsSet
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[277]"></a>osRtxThreadBlock</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[282]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[283]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
</UL>

<P><STRONG><a name="[279]"></a>osRtxThreadFree</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[168]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[15e]"></a>svcRtxThreadExit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[15f]"></a>svcRtxThreadFlagsSet</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxThreadFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsSet)
</UL>
<P><STRONG><a name="[160]"></a>svcRtxThreadFlagsWait</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, rtx_thread.o(.text.svcRtxThreadFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxThreadFlagsWait &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadFlagsWait)
</UL>
<P><STRONG><a name="[161]"></a>svcRtxThreadGetId</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtx_thread.o(.text.svcRtxThreadGetId))
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetId)
</UL>
<P><STRONG><a name="[162]"></a>svcRtxThreadNew</STRONG> (Thumb, 476 bytes, Stack size 48 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[163]"></a>svcRtxThreadTerminate</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxThreadTerminate &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadTerminate)
</UL>
<P><STRONG><a name="[14a]"></a>svcRtxDelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[26e]"></a>EventFlagsCheck</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, rtx_evflags.o(.text.EventFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EventFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsWait
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
</UL>

<P><STRONG><a name="[164]"></a>osRtxEventFlagsPostProcess</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, rtx_evflags.o(.text.osRtxEventFlagsPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxEventFlagsPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.svcRtxEventFlagsNew)
</UL>
<P><STRONG><a name="[14b]"></a>svcRtxEventFlagsNew</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, rtx_evflags.o(.text.svcRtxEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcRtxEventFlagsNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.osEventFlagsNew)
</UL>
<P><STRONG><a name="[14c]"></a>svcRtxEventFlagsSet</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, rtx_evflags.o(.text.svcRtxEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxEventFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.osEventFlagsSet)
</UL>
<P><STRONG><a name="[14d]"></a>svcRtxEventFlagsWait</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, rtx_evflags.o(.text.svcRtxEventFlagsWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxEventFlagsWait &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.osEventFlagsWait)
</UL>
<P><STRONG><a name="[154]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[155]"></a>svcRtxMutexDelete</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[156]"></a>svcRtxMutexNew</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[157]"></a>svcRtxMutexRelease</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[166]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[15a]"></a>svcRtxSemaphoreAcquire</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxSemaphoreAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreAcquire)
</UL>
<P><STRONG><a name="[15b]"></a>svcRtxSemaphoreDelete</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = svcRtxSemaphoreDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreDelete)
</UL>
<P><STRONG><a name="[15c]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcRtxSemaphoreNew &rArr; osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreNew)
</UL>
<P><STRONG><a name="[15d]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtx_semaphore.o(.text.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[301]"></a>ClearDriverContextPtr</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cust_api_init.o(i.ClearDriverContextPtr))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Shutdown
</UL>

<P><STRONG><a name="[304]"></a>SetDriverContextPtr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cust_api_init.o(i.SetDriverContextPtr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SetDriverContextPtr &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_Start
</UL>

<P><STRONG><a name="[2e7]"></a>driver_lock_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cust_api_stack_offload.o(i.driver_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = driver_lock_mutex &rArr; rw_lock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_recvfrom
</UL>

<P><STRONG><a name="[2e9]"></a>driver_unlock_mutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cust_api_stack_offload.o(i.driver_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = driver_unlock_mutex &rArr; rw_unlock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_sendto
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_recvfrom
</UL>

<P><STRONG><a name="[29f]"></a>Install_static_wep_keys</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, api_ioctl.o(i.Install_static_wep_keys))
<BR><BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectWiFi
</UL>

<P><STRONG><a name="[395]"></a>rsn_auth_parse</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, api_ioctl.o(i.rsn_auth_parse))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
</UL>

<P><STRONG><a name="[393]"></a>rsn_cipher_parse</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, api_ioctl.o(i.rsn_cipher_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rsn_cipher_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
</UL>

<P><STRONG><a name="[2ba]"></a>security_ie_parse</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, api_ioctl.o(i.security_ie_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_cipher_parse
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_parse
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_cipher_parse
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_auth_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
</UL>

<P><STRONG><a name="[396]"></a>wpa_auth_parse</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, api_ioctl.o(i.wpa_auth_parse))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
</UL>

<P><STRONG><a name="[394]"></a>wpa_cipher_parse</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, api_ioctl.o(i.wpa_cipher_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_cipher_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;security_ie_parse
</UL>

<P><STRONG><a name="[169]"></a>query_credit_deficit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, api_txrx.o(i.query_credit_deficit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = query_credit_deficit &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ReadCreditCounter
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
</UL>
<BR>[Address Reference Count : 1]<UL><LI> api_txrx.o(i.Api_TxGetStatus)
</UL>
<P><STRONG><a name="[33e]"></a>Driver_SetAddressWindowRegister</STRONG> (Thumb, 160 bytes, Stack size 120 bytes, driver_diag.o(i.Driver_SetAddressWindowRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_configure
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteRegDiag
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadRegDiag
</UL>

<P><STRONG><a name="[2f6]"></a>ConnectService</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, driver_init.o(i.ConnectService))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ConnectService &rArr; HTC_ConnectService &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_set_control_ep
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ConnectService
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupServices
</UL>

<P><STRONG><a name="[321]"></a>Driver_TargReset</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, driver_init.o(i.Driver_TargReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_WriteDataDiag
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_ReadDataDiag
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_BootComm
</UL>

<P><STRONG><a name="[333]"></a>SetupServices</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, driver_init.o(i.SetupServices))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SetupServices &rArr; ConnectService &rArr; HTC_ConnectService &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConnectService
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[343]"></a>Driver_PostProcessRequest</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, driver_txrx.o(i.Driver_PostProcessRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Driver_PostProcessRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SendPacket
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_RecvPacket
</UL>

<P><STRONG><a name="[16d]"></a>Driver_TxComplete</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, driver_txrx.o(i.Driver_TxComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Driver_TxComplete &rArr; Api_TxComplete &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTxComplete
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TxComplete
</UL>
<BR>[Address Reference Count : 2]<UL><LI> driver_txrx.o(i.Driver_SubmitTxRequest)
<LI> driver_txrx.o(i.Driver_SubmitTxRequestNoBlock)
</UL>
<P><STRONG><a name="[34a]"></a>driver_lock_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, driver_txrx.o(i.driver_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = driver_lock_mutex &rArr; rw_lock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
</UL>

<P><STRONG><a name="[34b]"></a>driver_unlock_mutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, driver_txrx.o(i.driver_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = driver_unlock_mutex &rArr; rw_unlock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequest
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_SubmitTxRequestNoBlock
</UL>

<P><STRONG><a name="[39d]"></a>wmi_addba_req_event_rx</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wmi.o(i.wmi_addba_req_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wmi_addba_req_event_rx &rArr; Api_AggrRecvAddbaReqEvent &rArr; aggr_recv_addba_req_evt &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_AggrRecvAddbaReqEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[39f]"></a>wmi_bssInfo_event_rx</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wmi.o(i.wmi_bssInfo_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wmi_bssInfo_event_rx &rArr; Api_BssInfoEvent &rArr; Custom_Api_BssInfoEvent &rArr; fill_scan_info &rArr; Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_BssInfoEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[3a0]"></a>wmi_connect_event_rx</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, wmi.o(i.wmi_connect_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = wmi_connect_event_rx &rArr; Api_ConnectEvent &rArr; aggr_reset_state &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[3aa]"></a>wmi_delba_req_event_rx</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, wmi.o(i.wmi_delba_req_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wmi_delba_req_event_rx &rArr; Api_AggrRecvDelbaReqEvent &rArr; aggr_recv_delba_req_evt &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_AggrRecvDelbaReqEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[3af]"></a>wmi_determine_userPriority</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wmi.o(i.wmi_determine_userPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wmi_determine_userPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_implicit_create_pstream
</UL>

<P><STRONG><a name="[3a2]"></a>wmi_disconnect_event_rx</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, wmi.o(i.wmi_disconnect_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = wmi_disconnect_event_rx &rArr; Api_DisconnectEvent &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[3ac]"></a>wmi_easyconfig_event_rx</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wmi.o(i.wmi_easyconfig_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wmi_easyconfig_event_rx &rArr; Api_easyconfigEvent &rArr; Custom_Api_easyconfigEvent &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_easyconfigEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[3a6]"></a>wmi_errorEvent_rx</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wmi.o(i.wmi_errorEvent_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wmi_errorEvent_rx &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[3a8]"></a>wmi_get_pmk_event_rx</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wmi.o(i.wmi_get_pmk_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wmi_get_pmk_event_rx &rArr; Api_GetPmkEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_GetPmkEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[3a1]"></a>wmi_ready_event_rx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wmi.o(i.wmi_ready_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wmi_ready_event_rx &rArr; Api_ReadyEvent &rArr; Custom_Api_ReadyEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ReadyEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[3a4]"></a>wmi_regDomain_event_rx</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wmi.o(i.wmi_regDomain_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wmi_regDomain_event_rx
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RegDomainEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[3a3]"></a>wmi_rsna_4way_rx</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wmi.o(i.wmi_rsna_4way_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wmi_rsna_4way_rx &rArr; Api_RSNASuccessEvent &rArr; Custom_Api_RSNASuccessEvent &rArr; driver_unlock_mutex &rArr; rw_unlock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_RSNASuccessEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[3a5]"></a>wmi_scanComplete_rx</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wmi.o(i.wmi_scanComplete_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wmi_scanComplete_rx &rArr; Api_ScanCompleteEvent &rArr; wmi_bssfilter_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ScanCompleteEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[3ae]"></a>wmi_simple_cmd</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wmi.o(i.wmi_simple_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_netbuf_alloc
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_cmd_send
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_stats_cmd
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_get_pmk_cmd
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_disconnect_cmd
</UL>

<P><STRONG><a name="[3a7]"></a>wmi_statsEvent_rx</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wmi.o(i.wmi_statsEvent_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wmi_statsEvent_rx &rArr; Api_TargetStatsEvent &rArr; Custom_Driver_WakeUser &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TargetStatsEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[3ab]"></a>wmi_tkip_micerr_event_rx</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wmi.o(i.wmi_tkip_micerr_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wmi_tkip_micerr_event_rx &rArr; Api_TkipMicErrorEvent &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_TkipMicErrorEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[3a9]"></a>wmi_wps_profile_event_rx</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, wmi.o(i.wmi_wps_profile_event_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wmi_wps_profile_event_rx &rArr; Api_WpsProfileEvent &rArr; wmi_disconnect_cmd &rArr; wmi_simple_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wmi_control_rx
</UL>

<P><STRONG><a name="[16a]"></a>Atheros_Driver_Task</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cust_driver_main.o(i.Atheros_Driver_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Atheros_Driver_Task &rArr; Driver_Main &rArr; Driver_TxReady &rArr; Htc_GetCreditCounterUpdate &rArr; Htc_ReadCreditCounter &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_MsecDelay
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DeInit
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Driver_WakeUser
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_pend_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cust_driver_main.o(i.Custom_Driver_CreateThread)
</UL>
<P><STRONG><a name="[16b]"></a>Custom_FreeRxRequest</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cust_driver_main.o(i.Custom_FreeRxRequest))
<BR>[Address Reference Count : 1]<UL><LI> cust_driver_main.o(i.Custom_GetRxRequest)
</UL>
<P><STRONG><a name="[29a]"></a>driver_lock_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, api_wmi_rx.o(i.driver_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = driver_lock_mutex &rArr; rw_lock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>

<P><STRONG><a name="[29b]"></a>driver_unlock_mutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, api_wmi_rx.o(i.driver_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = driver_unlock_mutex &rArr; rw_unlock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_WpsProfileEvent
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_DisconnectEvent
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ConnectEvent
</UL>

<P><STRONG><a name="[32b]"></a>driver_lock_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, driver_main.o(i.driver_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = driver_lock_mutex &rArr; rw_lock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[32c]"></a>driver_unlock_mutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, driver_main.o(i.driver_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = driver_unlock_mutex &rArr; rw_unlock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_DropTxDataPackets
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Main
</UL>

<P><STRONG><a name="[2f4]"></a>ConfigureByteSwap</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, spi_hcd.o(i.ConfigureByteSwap))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ConfigureByteSwap &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Request
</UL>

<P><STRONG><a name="[317]"></a>DoDMAOp</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, spi_hcd.o(i.DoDMAOp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DoDMAOp &rArr; MaskSPIInterrupts &rArr; Hcd_UnmaskSPIInterrupts &rArr;  MaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_TransferData
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Request
</UL>

<P><STRONG><a name="[31d]"></a>DoPioReadInternal</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, spi_hcd.o(i.DoPioReadInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DoPioReadInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_RefreshWriteBufferSpace
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_GetLookAhead
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioInternalAccess
</UL>

<P><STRONG><a name="[2f5]"></a>DoPioWriteInternal</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, spi_hcd.o(i.DoPioWriteInternal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Deinitialize
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetWriteBufferWaterMark
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MaskSPIInterrupts
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableDisableSPIIRQHwDetect
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigureByteSwap
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioInternalAccess
</UL>

<P><STRONG><a name="[31b]"></a>EnableDisableSPIIRQHwDetect</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, spi_hcd.o(i.EnableDisableSPIIRQHwDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EnableDisableSPIIRQHwDetect &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_EnableDisableSPIIRQ
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
</UL>

<P><STRONG><a name="[354]"></a>HandleExternalReadDone</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_hcd.o(i.HandleExternalReadDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutToken
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_TransferData
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
</UL>

<P><STRONG><a name="[31a]"></a>Hcd_TransferData</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, spi_hcd.o(i.Hcd_TransferData))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bus_InOutDescriptorSet
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_DoPioExternalAccess
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleExternalReadDone
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
</UL>

<P><STRONG><a name="[318]"></a>MaskSPIInterrupts</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_hcd.o(i.MaskSPIInterrupts))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MaskSPIInterrupts &rArr; Hcd_UnmaskSPIInterrupts &rArr;  MaskSPIInterrupts (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoDMAOp
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_UnmaskSPIInterrupts
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
</UL>

<P><STRONG><a name="[355]"></a>ResetWriteBufferWaterMark</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spi_hcd.o(i.ResetWriteBufferWaterMark))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ResetWriteBufferWaterMark &rArr; DoPioWriteInternal &rArr; Bus_InOutToken
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoPioWriteInternal
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_Init
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_SpiInterrupt
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hcd_ProgramWriteBufferWaterMark
</UL>

<P><STRONG><a name="[353]"></a>Htc_DistributeCredits</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, htc.o(i.Htc_DistributeCredits))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Htc_DistributeCredits
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_Start
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTC_ProcessCpuInterrupt
</UL>

<P><STRONG><a name="[358]"></a>Htc_ProcessCreditRpt</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, htc.o(i.Htc_ProcessCreditRpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Htc_ProcessCreditRpt &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Util_GetEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessTrailer
</UL>

<P><STRONG><a name="[35a]"></a>Htc_ProcessTrailer</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, htc.o(i.Htc_ProcessTrailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Htc_ProcessTrailer &rArr; Htc_ProcessCreditRpt &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_func
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessCreditRpt
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Htc_ProcessRecvHeader
</UL>

<P><STRONG><a name="[2fb]"></a>driver_lock_mutex</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cust_api_wmi_rx.o(i.driver_lock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = driver_lock_mutex &rArr; rw_lock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_lock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_DisconnectEvent
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
</UL>

<P><STRONG><a name="[2fc]"></a>driver_unlock_mutex</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cust_api_wmi_rx.o(i.driver_unlock_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = driver_unlock_mutex &rArr; rw_unlock_mutex
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_unlock_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_RSNASuccessEvent
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_DisconnectEvent
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_ConnectEvent
</UL>

<P><STRONG><a name="[2fa]"></a>fill_scan_info</STRONG> (Thumb, 396 bytes, Stack size 72 bytes, cust_api_wmi_rx.o(i.fill_scan_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fill_scan_info &rArr; Api_ParseInfoElem &rArr; security_ie_parse &rArr; wpa_cipher_parse
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Api_ParseInfoElem
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Custom_Api_BssInfoEvent
</UL>

<P><STRONG><a name="[19d]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[99]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[f9]"></a>Board_GUI_TouchScan</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Board_GUI_TouchScan &rArr; Board_LCD_TouchScan &rArr; Board_Pen_Read &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_TouchScan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[f8]"></a>Board_LCD_FillFrameNormal</STRONG> (Thumb, 426 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Board_LCD_FillFrameNormal &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_LOG_ADD
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_SetCursorPosition
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[f7]"></a>Board_LCD_Map</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Board_LCD_Map &rArr; Board_LCD_SetCursorPosition &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsWait
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_SetCursorPosition
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[1e2]"></a>Board_LCD_SetCursorPosition</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Board_LCD_SetCursorPosition &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_Map
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_FillFrameNormal
</UL>

<P><STRONG><a name="[1de]"></a>Board_LCD_TouchScan</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Board_LCD_TouchScan &rArr; Board_Pen_Read &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Pen_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gui_input_get_calib
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_GUI_TouchScan
</UL>

<P><STRONG><a name="[1df]"></a>Board_Pen_Read</STRONG> (Thumb, 424 bytes, Stack size 80 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Board_Pen_Read &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_TouchScan
</UL>

<P><STRONG><a name="[1d7]"></a>Board_SD_WaitReady</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Board_SD_WaitReady
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>Board_Spi1_MSPDeInitCallback</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Board_Spi1_MSPDeInitCallback &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[a6]"></a>Board_Spi1_MSPInitCallback</STRONG> (Thumb, 400 bytes, Stack size 64 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Board_Spi1_MSPInitCallback &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[a5]"></a>Board_Spi4_MSPDeInitCallback</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Board_Spi4_MSPDeInitCallback &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>Board_Spi4_MSPInitCallback</STRONG> (Thumb, 332 bytes, Stack size 64 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Board_Spi4_MSPInitCallback &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[1c0]"></a>Board_Spi_Init</STRONG> (Thumb, 712 bytes, Stack size 88 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Board_Spi_Init &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>Board_Uart1_MSPDeInitCallback</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Board_Uart1_MSPDeInitCallback &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[9f]"></a>Board_Uart1_MSPInitCallback</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Board_Uart1_MSPInitCallback &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[105]"></a>Board_WIFI_Assert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Board_WIFI_Assert &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[101]"></a>Board_WIFI_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[102]"></a>Board_WIFI_Free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Board_WIFI_Free &rArr; RTE_MEM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[fb]"></a>Board_WIFI_GetTick</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Board_WIFI_GetTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>Board_WIFI_InterfaceDeInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>Board_WIFI_InterfaceInit</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Board_WIFI_InterfaceInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[104]"></a>Board_WIFI_InterruptSet</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[103]"></a>Board_WIFI_Malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Board_WIFI_Malloc &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>Board_WIFI_PowerSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[fe]"></a>Board_WIFI_SPITransRec</STRONG> (Thumb, 812 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Board_WIFI_SPITransRec &rArr; osEventFlagsWait &rArr; EventFlagsCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsWait
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[1ae]"></a>Clock_Config</STRONG> (Thumb, 5740 bytes, Stack size 224 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Clock_Config &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[266]"></a>EventRecordItem</STRONG> (Thumb, 676 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EventRecordItem
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[11a]"></a>GUI_CPU_TimerCallback</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = GUI_CPU_TimerCallback &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[1d2]"></a>HAL_DMA_Abort</STRONG> (Thumb, 774 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1d3]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1db]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 426 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart1_MSPDeInitCallback
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Spi4_MSPDeInitCallback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Spi1_MSPDeInitCallback
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 798 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream2_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream0_IRQHandler
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_DMA_Init</STRONG> (Thumb, 1258 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart1_MSPInitCallback
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Spi4_MSPInitCallback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Spi1_MSPInitCallback
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1da]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 436 bytes, Stack size 36 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart1_MSPDeInitCallback
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Spi4_MSPDeInitCallback
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Spi1_MSPDeInitCallback
</UL>

<P><STRONG><a name="[1af]"></a>HAL_GPIO_Init</STRONG> (Thumb, 412 bytes, Stack size 44 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_WIFI_InterfaceInit
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart1_MSPInitCallback
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Spi4_MSPInitCallback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Spi1_MSPInitCallback
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Config
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 708 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_IRQHandler &rArr; osEventFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI4_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[1e1]"></a>HAL_SPI_Receive</STRONG> (Thumb, 1584 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Pen_Read
</UL>

<P><STRONG><a name="[1e0]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 682 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Pen_Read
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_SetCursorPosition
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_Map
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_FillFrameNormal
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_SPI_TransmitReceive_IT</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_WIFI_SPITransRec
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_Map
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_FillFrameNormal
</UL>

<P><STRONG><a name="[e3]"></a>LEDTimer_Callback</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[1dc]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 1312 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Config
</UL>

<P><STRONG><a name="[1dd]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 1312 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Config
</UL>

<P><STRONG><a name="[1c8]"></a>RTE_Assert</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_create
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_write
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_trunc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_seek
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_open
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_set_spin_time
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_create
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_ver
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_hor
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_animate
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_btn_selected
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_create
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_action
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_refr_size
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_signal
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_ink_effect_anim_ready
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_clock_action
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConnectCheckCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Vprintf
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Config
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_WIFI_Assert
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Uart1_MSPInitCallback
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Spi_Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Spi4_MSPInitCallback
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_Spi1_MSPInitCallback
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>

<P><STRONG><a name="[1b6]"></a>RTE_LOG_ADD</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Vprintf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_ok_action_animation
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_clean_action_animation
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_INIT_Function
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Shell_Poll
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_FillFrameNormal
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scancancel_action
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_close_action_animation
</UL>

<P><STRONG><a name="[1b5]"></a>RTE_MEM_Alloc</STRONG> (Thumb, 348 bytes, Stack size 88 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Monitor
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_LOG_ADD
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_open
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_set_spin_time
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_create
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_ver
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_hor
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_animate
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_btn_selected
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_action
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_refr_size
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_signal
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_ink_effect_anim_ready
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_INIT_Function
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_WIFI_Malloc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_FillFrameNormal
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>

<P><STRONG><a name="[1cb]"></a>RTE_MEM_Free</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTE_MEM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_remove
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_signal
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_set_spin_time
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_create
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_ver
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_hor
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_animate
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_btn_selected
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_action
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_dsc_get_info
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_refr_size
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_signal
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_ink_effect_anim_ready
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_task
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiDisconnectCheckCallback
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_SCAN_Fnction
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_WIFI_Free
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_FillFrameNormal
</UL>

<P><STRONG><a name="[1ca]"></a>RTE_MEM_Monitor</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTE_MEM_Monitor
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_free
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Shell_CMD_RTEInfor
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
</UL>

<P><STRONG><a name="[1b7]"></a>RTE_MEM_Realloc</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = RTE_MEM_Realloc &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_LOG_ADD
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_create
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_write
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_trunc
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ufs_seek
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_create
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_create
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_action
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_clock_action
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskWIFI
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_RoundRobin_CreateTimer
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>

<P><STRONG><a name="[1c1]"></a>RTE_Printf</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_TCPSERVERWAIT_Fnction
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_TCPSERVERSED_Fnction
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_TCPSERVERREC_Fnction
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_ERROR_Function
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_WIFI_WPS_EASY_Callback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_WIFIConnect_Callback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskWIFI
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskSYS
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Shell_CMD_RTEInfor
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Shell_CMD_Help
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_LOG_ADD
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_close_action_animation
</UL>

<P><STRONG><a name="[a3]"></a>RTE_Puts</STRONG> (Thumb, 462 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTE_Puts
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Vprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[1b8]"></a>RTE_RoundRobin_CreateTimer</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = RTE_RoundRobin_CreateTimer &rArr; RTE_MEM_Realloc &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_open_action
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_close_action
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskSYS
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sw_action
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>

<P><STRONG><a name="[1ce]"></a>RTE_RoundRobin_Run</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTE_RoundRobin_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskSYS
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
</UL>

<P><STRONG><a name="[9b]"></a>RTE_Shell_CMD_Help</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = RTE_Shell_CMD_Help &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[9c]"></a>RTE_Shell_CMD_RTEInfor</STRONG> (Thumb, 476 bytes, Stack size 80 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = RTE_Shell_CMD_RTEInfor &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Monitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>RTE_Shell_Poll</STRONG> (Thumb, 600 bytes, Stack size 120 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = RTE_Shell_Poll &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_LOG_ADD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[1c9]"></a>RTE_Vprintf</STRONG> (Thumb, 820 bytes, Stack size 64 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Puts
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_LOG_ADD
</UL>

<P><STRONG><a name="[1c2]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 342 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_SD_WaitReady
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
</UL>

<P><STRONG><a name="[1c3]"></a>SD_FindSCR</STRONG> (Thumb, 814 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_FindSCR
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>SPI_2linesRxISR_16BIT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[141]"></a>SPI_2linesRxISR_32BIT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[143]"></a>SPI_2linesRxISR_8BIT</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>SPI_2linesTxISR_16BIT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[140]"></a>SPI_2linesTxISR_32BIT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[144]"></a>SPI_2linesTxISR_8BIT</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[267]"></a>SPI_CloseTransfer</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>

<P><STRONG><a name="[149]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = SPI_DMAAbortOnError &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[148]"></a>SPI_DMAError</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SPI_DMAError &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[147]"></a>SPI_DMAHalfTransmitCplt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[146]"></a>SPI_DMATransmitCplt</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_DMATransmitCplt &rArr; osEventFlagsSet &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadFlagsSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>SPI_RxISR_16BIT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[af]"></a>SPI_RxISR_32BIT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>SPI_RxISR_8BIT</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>SPI_TxISR_16BIT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>SPI_TxISR_32BIT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>SPI_TxISR_8BIT</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[132]"></a>ServerCloseCheckCallback</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ServerCloseCheckCallback &rArr; lv_mbox_create &rArr; lv_label_create &rArr; lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_realign
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[131]"></a>ServerOpenCheckCallback</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = ServerOpenCheckCallback &rArr; lv_mbox_create &rArr; lv_label_create &rArr; lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_realign
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>SystemStaticsTimer_Callback</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[12c]"></a>TCPServer_close_action_animation</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = TCPServer_close_action_animation &rArr; lv_obj_animate &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_animate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>TCPServer_close_action_animation_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TCPServer_close_action_animation_cb &rArr; lv_obj_del &rArr; delete_children &rArr;  delete_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>ThreadTaskGUI</STRONG> (Thumb, 10224 bytes, Stack size 144 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = ThreadTaskGUI &rArr; refr_monitor &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_monitor
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_alien_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part_vdb
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_RoundRobin_Run
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_RoundRobin_CreateTimer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_LOG_ADD
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_FillFrameNormal
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[a8]"></a>ThreadTaskSYS</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = ThreadTaskSYS &rArr; RTE_RoundRobin_CreateTimer &rArr; RTE_MEM_Realloc &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_RoundRobin_Run
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_RoundRobin_CreateTimer
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>ThreadTaskWIFI</STRONG> (Thumb, 2304 bytes, Stack size 48 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = ThreadTaskWIFI &rArr; rw_sysDriverInit &rArr; _set_PowerParam &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverInit
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getLibVersion
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_getMacAddr
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>UART_DMAError</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[100]"></a>User_WIFIConnect_Callback</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = User_WIFIConnect_Callback &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[106]"></a>User_WIFI_WPS_EASY_Callback</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = User_WIFI_WPS_EASY_Callback &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[111]"></a>WIFI_CLOSERTCPSERVER_Fnction</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = WIFI_CLOSERTCPSERVER_Fnction &rArr; close &rArr; shutdown &rArr; t_shutdown &rArr; Api_shutdown &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[10a]"></a>WIFI_CONNECT_Fnction</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = WIFI_CONNECT_Fnction &rArr; rw_wlanConnect &rArr; _set_str_pmk &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanConnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[10b]"></a>WIFI_DISCONNECT_Fnction</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = WIFI_DISCONNECT_Fnction &rArr; rw_sysDriverReset &rArr; Custom_Api_Start &rArr; Driver_Init &rArr; Driver_BootComm &rArr; Driver_TargReset &rArr; Driver_WriteDataDiag &rArr; Driver_WriteRegDiag &rArr; Driver_SetAddressWindowRegister &rArr; Hcd_DoPioExternalAccess &rArr; HandleExternalReadDone &rArr; Hcd_TransferData &rArr; Bus_InOutDescriptorSet &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_sysDriverReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>WIFI_ERROR_Function</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = WIFI_ERROR_Function &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[10c]"></a>WIFI_GETIP_Fnction</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = WIFI_GETIP_Fnction &rArr; rw_ipConfig &rArr; t_ipconfig &rArr; Api_ipconfig &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_ipConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>WIFI_IDLE_Function</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[107]"></a>WIFI_INIT_Function</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = WIFI_INIT_Function &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_LOG_ADD
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[10d]"></a>WIFI_OPENTCPSERVER_Fnction</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = WIFI_OPENTCPSERVER_Fnction &rArr; bind &rArr; t_bind &rArr; Api_bind &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[109]"></a>WIFI_SCAN_Fnction</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = WIFI_SCAN_Fnction &rArr; rw_wlanNetworkScan &rArr; _ath_set_essid &rArr; ath_ioctl_handler &rArr; Api_ConnectWiFi &rArr; wmi_scanparams_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanGetScanInfo
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rw_wlanNetworkScan
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[10f]"></a>WIFI_TCPSERVERREC_Fnction</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = WIFI_TCPSERVERREC_Fnction &rArr; recv &rArr; t_recvfrom &rArr; Api_recvfrom &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[110]"></a>WIFI_TCPSERVERSED_Fnction</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = WIFI_TCPSERVERSED_Fnction &rArr; send &rArr; t_send &rArr; t_sendto &rArr; custom_send_tcpip &rArr; Api_DataTxStart &rArr; wmi_data_hdr_add &rArr; wmi_meta_add &rArr; a_netbuf_push &rArr; assert_func &rArr; _clean_filename &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>WIFI_TCPSERVERWAIT_Fnction</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = WIFI_TCPSERVERWAIT_Fnction &rArr; accept &rArr; t_accept &rArr; Api_accept &rArr; wmi_socket_cmd &rArr; wmi_cmd_send &rArr; a_netbuf_free &rArr; a_netbuf_free_rx_pool &rArr; Driver_ReportRxBuffStatus &rArr; Custom_Driver_WakeDriver &rArr; rw_post_sem &rArr; osSemaphoreRelease &rArr; osRtxPostProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>WifiConnectCheckCallback</STRONG> (Thumb, 1012 bytes, Stack size 176 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = WifiConnectCheckCallback &rArr; lv_mbox_create &rArr; lv_label_create &rArr; lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_realign
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>WifiDisconnectCheckCallback</STRONG> (Thumb, 380 bytes, Stack size 160 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = WifiDisconnectCheckCallback &rArr; lv_mbox_create &rArr; lv_label_create &rArr; lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_realign
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_animate
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>WifiScanCheckCallback</STRONG> (Thumb, 708 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = WifiScanCheckCallback &rArr; lv_list_create &rArr; lv_list_set_style &rArr; refr_btn_width &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_btn_width
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_realign
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_animate
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_add_btns
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_style
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>anim_task</STRONG> (Thumb, 1088 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = anim_task &rArr; RTE_MEM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[122]"></a>bench_close_action_animation</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = bench_close_action_animation &rArr; lv_obj_animate &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_animate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[13e]"></a>bench_close_action_animation_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bench_close_action_animation_cb &rArr; lv_obj_del &rArr; delete_children &rArr;  delete_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[117]"></a>btn_bench_action</STRONG> (Thumb, 672 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = btn_bench_action &rArr; lv_win_add_btn &rArr; lv_img_set_src &rArr; lv_img_dsc_get_info &rArr; lv_fs_open &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_realign
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_create
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_add_btn
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_animate
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[fa]"></a>btn_click_action</STRONG> (Thumb, 6440 bytes, Stack size 120 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = btn_click_action &rArr; lv_img_set_src &rArr; lv_img_dsc_get_info &rArr; lv_fs_open &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_RoundRobin_CreateTimer
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[118]"></a>btn_clock_action</STRONG> (Thumb, 1576 bytes, Stack size 48 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = btn_clock_action &rArr; lv_win_add_btn &rArr; lv_img_set_src &rArr; lv_img_dsc_get_info &rArr; lv_fs_open &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_realign
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_create
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_add_btn
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_animate
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_refr_size
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[119]"></a>btn_tcpserver_action</STRONG> (Thumb, 2248 bytes, Stack size 88 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = btn_tcpserver_action &rArr; lv_ta_set_text &rArr; lv_ta_add_char &rArr; lv_label_ins_text &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_realign
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_realign
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_create
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_add_btn
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_animate
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>btn_wifi_action</STRONG> (Thumb, 2388 bytes, Stack size 176 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = btn_wifi_action &rArr; lv_win_add_btn &rArr; lv_img_set_src &rArr; lv_img_dsc_get_info &rArr; lv_fs_open &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_btn_width
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_realign
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_create
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_add_btn
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_signal
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_animate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_style
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[124]"></a>clock_close_action_animation</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = clock_close_action_animation &rArr; lv_obj_animate &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_animate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[133]"></a>clock_close_action_animation_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = clock_close_action_animation_cb &rArr; lv_obj_del &rArr; delete_children &rArr;  delete_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[df]"></a>cursor_blink_anim</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cursor_blink_anim &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>deg_test_inv</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[b8]"></a>deg_test_norm</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[207]"></a>delete_children</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = delete_children &rArr;  delete_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
</UL>

<P><STRONG><a name="[113]"></a>gui_input_get_calib</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = gui_input_get_calib &rArr; Board_LCD_TouchScan &rArr; Board_Pen_Read &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Board_LCD_TouchScan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[1fd]"></a>indev_proc_press</STRONG> (Thumb, 2122 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = indev_proc_press &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_task
</UL>

<P><STRONG><a name="[1fe]"></a>indev_proc_release</STRONG> (Thumb, 690 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = indev_proc_release &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_task
</UL>

<P><STRONG><a name="[f6]"></a>indev_proc_task</STRONG> (Thumb, 2632 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = indev_proc_task &rArr; indev_proc_press &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[1ff]"></a>indev_search_obj</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = indev_search_obj &rArr;  indev_search_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_search_obj
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[138]"></a>kb_clean_action_animation</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = kb_clean_action_animation &rArr; lv_obj_del &rArr; delete_children &rArr;  delete_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_LOG_ADD
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[137]"></a>kb_ok_action_animation</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = kb_ok_action_animation &rArr; lv_preload_create &rArr; RTE_MEM_Realloc &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_set_spin_time
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_create
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_LOG_ADD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>lv_anim_path_ease_in_out</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_anim_path_ease_in_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>lv_anim_path_linear</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>lv_anim_path_step</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>lv_arc_design</STRONG> (Thumb, 2016 bytes, Stack size 216 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = lv_arc_design &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vfill
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[d6]"></a>lv_arc_signal</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_arc_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[11d]"></a>lv_bar_design</STRONG> (Thumb, 564 bytes, Stack size 96 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = lv_bar_design &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>lv_bar_signal</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_bar_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[21f]"></a>lv_btn_create</STRONG> (Thumb, 500 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lv_btn_create &rArr; lv_cont_create &rArr; RTE_MEM_Realloc &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_add_btn
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_bench_action
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
</UL>

<P><STRONG><a name="[ba]"></a>lv_btn_design</STRONG> (Thumb, 2006 bytes, Stack size 136 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = lv_btn_design &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>lv_btn_ink_effect_anim</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_btn_ink_effect_anim &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_signal
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_ink_effect_anim_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>lv_btn_ink_effect_anim_ready</STRONG> (Thumb, 478 bytes, Stack size 48 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lv_btn_ink_effect_anim_ready &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_ink_effect_anim
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>lv_btn_signal</STRONG> (Thumb, 2680 bytes, Stack size 48 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lv_btn_signal &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_ink_effect_anim
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[221]"></a>lv_btnm_create</STRONG> (Thumb, 462 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = lv_btnm_create &rArr; lv_btnm_set_map &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_add_btns
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>

<P><STRONG><a name="[be]"></a>lv_btnm_design</STRONG> (Thumb, 920 bytes, Stack size 152 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = lv_btnm_design &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_next
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[222]"></a>lv_btnm_set_map</STRONG> (Thumb, 726 bytes, Stack size 88 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = lv_btnm_set_map &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_add_btns
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_action
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>

<P><STRONG><a name="[bd]"></a>lv_btnm_signal</STRONG> (Thumb, 2276 bytes, Stack size 64 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = lv_btnm_signal &rArr; lv_btnm_set_map &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickCount
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[220]"></a>lv_cont_create</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = lv_cont_create &rArr; RTE_MEM_Realloc &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
</UL>

<P><STRONG><a name="[224]"></a>lv_cont_refr_autofit</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_cont_refr_autofit &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
</UL>

<P><STRONG><a name="[223]"></a>lv_cont_refr_layout</STRONG> (Thumb, 1656 bytes, Stack size 64 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = lv_cont_refr_layout &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_signal
</UL>

<P><STRONG><a name="[bf]"></a>lv_cont_signal</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = lv_cont_signal &rArr; lv_cont_refr_layout &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>lv_ddlist_design</STRONG> (Thumb, 546 bytes, Stack size 120 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = lv_ddlist_design &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[c0]"></a>lv_ddlist_pos_current_option</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_ddlist_pos_current_option &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_signal
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_signal
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_refr_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[225]"></a>lv_ddlist_refr_size</STRONG> (Thumb, 758 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = lv_ddlist_refr_size &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_pos_current_option
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_signal
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_signal
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_release_action
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_clock_action
</UL>

<P><STRONG><a name="[128]"></a>lv_ddlist_release_action</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = lv_ddlist_release_action &rArr; lv_ddlist_refr_size &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_next
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_refr_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[125]"></a>lv_ddlist_scrl_signal</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_ddlist_scrl_signal &rArr; lv_obj_get_style &rArr; lv_group_mod_style
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>lv_ddlist_signal</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = lv_ddlist_signal &rArr; lv_ddlist_refr_size &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_refr_size
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_pos_current_option
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[21a]"></a>lv_draw_label</STRONG> (Thumb, 2384 bytes, Stack size 256 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lv_draw_label &rArr; lv_txt_get_size &rArr; lv_txt_get_next_line &rArr; lv_txt_utf8_next
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_next
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_design
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_design
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_design
</UL>

<P><STRONG><a name="[204]"></a>lv_draw_rect</STRONG> (Thumb, 8928 bytes, Stack size 352 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vpx
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vfill
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_design
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_design
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_design
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_design
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_design
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_design
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_design
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_design
</UL>

<P><STRONG><a name="[21c]"></a>lv_draw_shadow_bottom</STRONG> (Thumb, 874 bytes, Stack size 36 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = lv_draw_shadow_bottom &rArr; lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vpx
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vfill
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[21b]"></a>lv_draw_shadow_full</STRONG> (Thumb, 1628 bytes, Stack size 36 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = lv_draw_shadow_full &rArr; lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vpx
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vfill
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[0]"></a>lv_font_get_bitmap_continuous</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>lv_font_get_width_continuous</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.data)
</UL>
<P><STRONG><a name="[20e]"></a>lv_fs_open</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = lv_fs_open &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_dsc_get_info
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[1f9]"></a>lv_group_focus_next</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_task
</UL>

<P><STRONG><a name="[1fc]"></a>lv_group_focus_prev</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_group_focus_prev &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_task
</UL>

<P><STRONG><a name="[206]"></a>lv_group_mod_style</STRONG> (Thumb, 634 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_group_mod_style
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scrl_design
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>

<P><STRONG><a name="[1fb]"></a>lv_group_remove_obj</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_group_remove_obj &rArr; lv_group_focus_next &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
</UL>

<P><STRONG><a name="[217]"></a>lv_img_built_in_decoder_line_alpha</STRONG> (Thumb, 1106 bytes, Stack size 36 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_img_built_in_decoder_line_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[218]"></a>lv_img_built_in_decoder_line_indexed</STRONG> (Thumb, 748 bytes, Stack size 36 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_img_built_in_decoder_line_indexed
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[228]"></a>lv_img_create</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = lv_img_create &rArr; RTE_MEM_Realloc &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_add_btn
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
</UL>

<P><STRONG><a name="[c2]"></a>lv_img_design</STRONG> (Thumb, 520 bytes, Stack size 96 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556 + Unknown Stack Size
<LI>Call Chain = lv_img_design &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[215]"></a>lv_img_draw_core</STRONG> (Thumb, 1440 bytes, Stack size 36 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = lv_img_draw_core &rArr; lv_img_dsc_get_info &rArr; lv_fs_open &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vmap
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_dsc_get_info
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_built_in_decoder_line_indexed
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_built_in_decoder_line_alpha
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
</UL>

<P><STRONG><a name="[216]"></a>lv_img_dsc_get_info</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lv_img_dsc_get_info &rArr; lv_fs_open &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[229]"></a>lv_img_set_src</STRONG> (Thumb, 670 bytes, Stack size 104 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = lv_img_set_src &rArr; lv_img_dsc_get_info &rArr; lv_fs_open &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_next
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_dsc_get_info
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_add_btn
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_signal
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiDisconnectCheckCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConnectCheckCallback
</UL>

<P><STRONG><a name="[c1]"></a>lv_img_signal</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = lv_img_signal &rArr; lv_img_set_src &rArr; lv_img_dsc_get_info &rArr; lv_fs_open &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[201]"></a>lv_inv_area</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_inv_area
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
</UL>

<P><STRONG><a name="[136]"></a>lv_kb_def_action</STRONG> (Thumb, 1688 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = lv_kb_def_action &rArr; lv_ta_add_char &rArr; lv_label_ins_text &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_next
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[135]"></a>lv_kb_signal</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_kb_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[22f]"></a>lv_label_create</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = lv_label_create &rArr; lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_create
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_clock_action
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_bench_action
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
</UL>

<P><STRONG><a name="[c7]"></a>lv_label_design</STRONG> (Thumb, 382 bytes, Stack size 64 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = lv_label_design &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[226]"></a>lv_label_get_letter_on</STRONG> (Thumb, 460 bytes, Stack size 72 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_label_get_letter_on &rArr; lv_txt_get_next_line &rArr; lv_txt_utf8_next
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_next
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_release_action
</UL>

<P><STRONG><a name="[232]"></a>lv_label_get_letter_pos</STRONG> (Thumb, 658 bytes, Stack size 80 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_label_get_letter_pos &rArr; lv_txt_get_next_line &rArr; lv_txt_utf8_next
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_next
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
</UL>

<P><STRONG><a name="[22e]"></a>lv_label_ins_text</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = lv_label_ins_text &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_next
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_action
</UL>

<P><STRONG><a name="[231]"></a>lv_label_refr_text</STRONG> (Thumb, 3612 bytes, Stack size 88 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_next
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_y
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_x
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_btn_width
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>

<P><STRONG><a name="[230]"></a>lv_label_set_long_mode</STRONG> (Thumb, 916 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>

<P><STRONG><a name="[c8]"></a>lv_label_set_offset_x</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_label_set_offset_x &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[c9]"></a>lv_label_set_offset_y</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_label_set_offset_y &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[22a]"></a>lv_label_set_text</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = lv_label_set_text &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_open_action
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_close_action
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_monitor
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_create
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_action
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_clock_action
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_bench_action
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiScanCheckCallback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiDisconnectCheckCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConnectCheckCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerOpenCheckCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCloseCheckCallback
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CPU_TimerCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sw_action
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>

<P><STRONG><a name="[c6]"></a>lv_label_signal</STRONG> (Thumb, 524 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = lv_label_signal &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[238]"></a>lv_list_add</STRONG> (Thumb, 586 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = lv_list_add &rArr; lv_img_set_src &rArr; lv_img_dsc_get_info &rArr; lv_fs_open &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiScanCheckCallback
</UL>

<P><STRONG><a name="[cb]"></a>lv_list_btn_signal</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = lv_list_btn_signal &rArr; lv_list_set_btn_selected &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_btn_selected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[233]"></a>lv_list_create</STRONG> (Thumb, 608 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = lv_list_create &rArr; lv_list_set_style &rArr; refr_btn_width &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_btn_width
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_style
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiScanCheckCallback
</UL>

<P><STRONG><a name="[237]"></a>lv_list_set_btn_selected</STRONG> (Thumb, 1478 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = lv_list_set_btn_selected &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_signal
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_btn_signal
</UL>

<P><STRONG><a name="[236]"></a>lv_list_set_style</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = lv_list_set_style &rArr; refr_btn_width &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_btn_width
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_create
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiScanCheckCallback
</UL>

<P><STRONG><a name="[ca]"></a>lv_list_signal</STRONG> (Thumb, 1052 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = lv_list_signal &rArr; refr_btn_width &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_btn_width
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_btn_selected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[23b]"></a>lv_mbox_add_btns</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = lv_mbox_add_btns &rArr; lv_btnm_create &rArr; lv_btnm_set_map &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_realign
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiScanCheckCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sw_action
</UL>

<P><STRONG><a name="[cf]"></a>lv_mbox_close_action</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = lv_mbox_close_action &rArr; lv_obj_animate &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_animate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[239]"></a>lv_mbox_create</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = lv_mbox_create &rArr; lv_label_create &rArr; lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_realign
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_open_action
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_close_action
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiScanCheckCallback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiDisconnectCheckCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConnectCheckCallback
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerOpenCheckCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCloseCheckCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sw_action
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>

<P><STRONG><a name="[ce]"></a>lv_mbox_signal</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_mbox_signal &rArr; mbox_realign &rArr; lv_obj_set_width &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_realign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[209]"></a>lv_obj_align</STRONG> (Thumb, 834 bytes, Stack size 28 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
</UL>

<P><STRONG><a name="[20a]"></a>lv_obj_animate</STRONG> (Thumb, 592 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = lv_obj_animate &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_close_action
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_close_action_animation
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_clock_action
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_bench_action
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_close_action_animation
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiScanCheckCallback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiDisconnectCheckCallback
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer_close_action_animation
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_close_action_animation
</UL>

<P><STRONG><a name="[200]"></a>lv_obj_create</STRONG> (Thumb, 418 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = lv_obj_create &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_create
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_create
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
</UL>

<P><STRONG><a name="[d0]"></a>lv_obj_del</STRONG> (Thumb, 522 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_del &rArr; delete_children &rArr;  delete_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_children
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_action
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_ok_action_animation
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_clean_action_animation
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_close_action_animation_cb
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bench_close_action_animation_cb
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiScanCheckCallback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiDisconnectCheckCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConnectCheckCallback
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer_close_action_animation_cb
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCPServer_close_action_animation
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerOpenCheckCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCloseCheckCallback
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scancancel_action
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_mbox_close_action
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_close_action_animation_cb
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_close_action_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[b1]"></a>lv_obj_design</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = lv_obj_design &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[203]"></a>lv_obj_get_style</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_obj_get_style &rArr; lv_group_mod_style
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_mod_style
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_btn_width
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_realign
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_realign
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_signal
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_signal
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_design
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scrl_design
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_scrl_signal
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_design
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_design
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_design
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_design
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_btn_selected
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_signal
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_design
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_scrl_signal
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_refr_size
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_pos_current_option
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_design
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_design
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_design
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_design
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_clock_action
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
</UL>

<P><STRONG><a name="[1fa]"></a>lv_obj_invalidate</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_test_click
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_monitor
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_btn_width
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_realign
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_realign
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_create
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_add_btn
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_signal
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_sw_signal
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_signal
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_signal
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_spinner_animation
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_create
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_signal
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_close_action
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_add_btns
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_style
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_btn_selected
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_create
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_btn_signal
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_y
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_offset_x
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_action
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_signal
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_refr_size
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_autofit
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_signal
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_signal
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_ink_effect_anim_ready
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_ink_effect_anim
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_task
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_blink_anim
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_clock_action
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_bench_action
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiScanCheckCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerOpenCheckCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCloseCheckCallback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_scancancel_action
</UL>

<P><STRONG><a name="[b5]"></a>lv_obj_set_height</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_set_height &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_signal
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_refr_size
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_clock_action
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiScanCheckCallback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[208]"></a>lv_obj_set_parent</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_obj_set_parent &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_signal
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_create
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[cd]"></a>lv_obj_set_pos</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_position
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_open_action
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_close_action
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_realign
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_create
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_signal
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_btn_selected
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_pos_current_option
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_refr_layout
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_ok_action_animation
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_task
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_clock_action
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_bench_action
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiScanCheckCallback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiDisconnectCheckCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConnectCheckCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerOpenCheckCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCloseCheckCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sw_action
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>lv_obj_set_width</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_set_width &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_open_action
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_close_action
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_btn_width
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_realign
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiScanCheckCallback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiDisconnectCheckCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConnectCheckCallback
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerOpenCheckCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCloseCheckCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sw_action
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>lv_obj_set_x</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_set_x &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_hor
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>lv_obj_set_y</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_set_y &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_ver
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_btn_selected
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[b0]"></a>lv_obj_signal</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_obj_signal &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[234]"></a>lv_page_create</STRONG> (Thumb, 710 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = lv_page_create &rArr; lv_cont_create &rArr; RTE_MEM_Realloc &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_create
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_create
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_clock_action
</UL>

<P><STRONG><a name="[d4]"></a>lv_page_design</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = lv_page_design &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[227]"></a>lv_page_sb_refresh</STRONG> (Thumb, 836 bytes, Stack size 80 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_page_sb_refresh &rArr; lv_obj_get_style &rArr; lv_group_mod_style
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_create
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scrollable_signal
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_style
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_create
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_refr_size
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_clock_action
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_bench_action
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiScanCheckCallback
</UL>

<P><STRONG><a name="[23d]"></a>lv_page_scroll_hor</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = lv_page_scroll_hor &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[23c]"></a>lv_page_scroll_ver</STRONG> (Thumb, 392 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = lv_page_scroll_ver &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_signal
</UL>

<P><STRONG><a name="[d1]"></a>lv_page_scrollable_signal</STRONG> (Thumb, 604 bytes, Stack size 80 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_page_scrollable_signal &rArr; lv_page_sb_refresh &rArr; lv_obj_get_style &rArr; lv_group_mod_style
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_inv_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>lv_page_signal</STRONG> (Thumb, 764 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = lv_page_signal &rArr; lv_page_scroll_ver &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_ver
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_scroll_hor
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[23e]"></a>lv_preload_create</STRONG> (Thumb, 836 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = lv_preload_create &rArr; RTE_MEM_Realloc &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_spinner_animation
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_open_action
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_close_action
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_ok_action_animation
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sw_action
</UL>

<P><STRONG><a name="[d8]"></a>lv_preload_design</STRONG> (Thumb, 408 bytes, Stack size 128 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = lv_preload_design &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[23f]"></a>lv_preload_set_spin_time</STRONG> (Thumb, 392 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = lv_preload_set_spin_time &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_spinner_animation
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_open_action
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_close_action
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_ok_action_animation
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sw_action
</UL>

<P><STRONG><a name="[d7]"></a>lv_preload_signal</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_preload_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>lv_preload_spinner_animation</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_preload_spinner_animation &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_set_spin_time
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[20b]"></a>lv_refr_area_part_vdb</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_refr_area_part_vdb &rArr; lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
</UL>

<P><STRONG><a name="[20c]"></a>lv_refr_get_top_obj</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = lv_refr_get_top_obj &rArr;  lv_refr_get_top_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part_vdb
</UL>

<P><STRONG><a name="[20d]"></a>lv_refr_obj</STRONG> (Thumb, 384 bytes, Stack size 64 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part_vdb
</UL>

<P><STRONG><a name="[129]"></a>lv_roller_design</STRONG> (Thumb, 1142 bytes, Stack size 160 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = lv_roller_design &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[12b]"></a>lv_roller_scrl_signal</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = lv_roller_scrl_signal &rArr; refr_position &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[12a]"></a>lv_roller_signal</STRONG> (Thumb, 800 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = lv_roller_signal &rArr; lv_ddlist_refr_size &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_refr_size
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_pos_current_option
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>lv_scrl_design</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_scrl_design &rArr; lv_obj_get_style &rArr; lv_group_mod_style
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_mod_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[11f]"></a>lv_slider_design</STRONG> (Thumb, 976 bytes, Stack size 152 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = lv_slider_design &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[11e]"></a>lv_slider_signal</STRONG> (Thumb, 908 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_slider_signal &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[120]"></a>lv_sw_signal</STRONG> (Thumb, 692 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_sw_signal &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[22b]"></a>lv_ta_add_char</STRONG> (Thumb, 956 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = lv_ta_add_char &rArr; lv_label_ins_text &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_next
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_action
</UL>

<P><STRONG><a name="[241]"></a>lv_ta_create</STRONG> (Thumb, 952 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = lv_ta_create &rArr; lv_label_create &rArr; lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_blink_anim
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>

<P><STRONG><a name="[22d]"></a>lv_ta_del_char</STRONG> (Thumb, 636 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = lv_ta_del_char &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_action
</UL>

<P><STRONG><a name="[dd]"></a>lv_ta_design</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_ta_design
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>lv_ta_scrollable_design</STRONG> (Thumb, 1260 bytes, Stack size 152 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = lv_ta_scrollable_design &rArr; lv_draw_rect &rArr; lv_draw_shadow_full &rArr; lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_next
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>lv_ta_scrollable_signal</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_ta_scrollable_signal &rArr; lv_obj_get_style &rArr; lv_group_mod_style
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[22c]"></a>lv_ta_set_cursor_pos</STRONG> (Thumb, 728 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = lv_ta_set_cursor_pos &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_next
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_blink_anim
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_signal
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_action
</UL>

<P><STRONG><a name="[242]"></a>lv_ta_set_text</STRONG> (Thumb, 754 bytes, Stack size 48 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = lv_ta_set_text &rArr; lv_ta_add_char &rArr; lv_label_ins_text &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_next
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btnm_action
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>

<P><STRONG><a name="[db]"></a>lv_ta_signal</STRONG> (Thumb, 792 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = lv_ta_signal &rArr; lv_ta_add_char &rArr; lv_label_ins_text &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_del_char
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[245]"></a>lv_tabview_add_tab</STRONG> (Thumb, 574 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = lv_tabview_add_tab &rArr; tabview_realign &rArr; lv_tabview_set_tab_act &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
</UL>

<P><STRONG><a name="[244]"></a>lv_tabview_set_tab_act</STRONG> (Thumb, 1066 bytes, Stack size 64 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = lv_tabview_set_tab_act &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_press_lost_handler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tab_btnm_action
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
</UL>

<P><STRONG><a name="[114]"></a>lv_tabview_signal</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = lv_tabview_signal &rArr; tabview_realign &rArr; lv_tabview_set_tab_act &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabview_realign
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[24b]"></a>lv_theme_alien_init</STRONG> (Thumb, 6742 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_theme_alien_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
</UL>

<P><STRONG><a name="[210]"></a>lv_txt_get_next_line</STRONG> (Thumb, 542 bytes, Stack size 64 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = lv_txt_get_next_line &rArr; lv_txt_utf8_next
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_next
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_design
</UL>

<P><STRONG><a name="[20f]"></a>lv_txt_get_size</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lv_txt_get_size &rArr; lv_txt_get_next_line &rArr; lv_txt_utf8_next
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_design
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[211]"></a>lv_txt_get_width</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lv_txt_get_width &rArr; lv_txt_utf8_next
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_next
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[212]"></a>lv_txt_utf8_next</STRONG> (Thumb, 228 bytes, Stack size 12 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_txt_utf8_next
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_line
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_cursor_pos
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_scrollable_design
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_add_char
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_kb_def_action
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ddlist_release_action
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_design
</UL>

<P><STRONG><a name="[e9]"></a>lv_ufs_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[f4]"></a>lv_ufs_dir_close</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[f2]"></a>lv_ufs_dir_open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>lv_ufs_dir_read</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_ufs_dir_read &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>lv_ufs_free</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_ufs_free &rArr; RTE_MEM_Monitor
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Monitor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[e8]"></a>lv_ufs_open</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = lv_ufs_open &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[eb]"></a>lv_ufs_read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_ufs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[e7]"></a>lv_ufs_ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[ea]"></a>lv_ufs_remove</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_ufs_remove &rArr; RTE_MEM_Free
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[ed]"></a>lv_ufs_seek</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = lv_ufs_seek &rArr; RTE_MEM_Realloc &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[f0]"></a>lv_ufs_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[ee]"></a>lv_ufs_tell</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[ef]"></a>lv_ufs_trunc</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = lv_ufs_trunc &rArr; RTE_MEM_Realloc &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[ec]"></a>lv_ufs_write</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = lv_ufs_write &rArr; RTE_MEM_Realloc &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[21d]"></a>lv_vfill</STRONG> (Thumb, 774 bytes, Stack size 72 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_vfill
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_bottom
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_design
</UL>

<P><STRONG><a name="[219]"></a>lv_vmap</STRONG> (Thumb, 1212 bytes, Stack size 136 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_vmap
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[21e]"></a>lv_vpx</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_vpx
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_full
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_shadow_bottom
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[24a]"></a>lv_win_add_btn</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = lv_win_add_btn &rArr; lv_img_set_src &rArr; lv_img_dsc_get_info &rArr; lv_fs_open &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_realign
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_clock_action
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_bench_action
</UL>

<P><STRONG><a name="[248]"></a>lv_win_create</STRONG> (Thumb, 1076 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = lv_win_create &rArr; lv_label_create &rArr; lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_realign
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_sb_refresh
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_clock_action
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_bench_action
</UL>

<P><STRONG><a name="[249]"></a>lv_win_realign</STRONG> (Thumb, 730 bytes, Stack size 48 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_win_realign &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_signal
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_create
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_add_btn
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_clock_action
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_bench_action
</UL>

<P><STRONG><a name="[e2]"></a>lv_win_signal</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_win_signal &rArr; lv_win_realign &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_realign
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[23a]"></a>mbox_realign</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbox_realign &rArr; lv_obj_set_width &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_open_action
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpserver_btn_close_action
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_signal
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_add_btns
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiScanCheckCallback
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiDisconnectCheckCallback
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiConnectCheckCallback
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerOpenCheckCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCloseCheckCallback
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_sw_action
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>

<P><STRONG><a name="[c4]"></a>pwd_char_hider</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = pwd_char_hider &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_utf8_next
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>pwd_char_hider_anim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[235]"></a>refr_btn_width</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = refr_btn_width &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_signal
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_style
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_create
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiScanCheckCallback
</UL>

<P><STRONG><a name="[13f]"></a>refr_monitor</STRONG> (Thumb, 276 bytes, Stack size 288 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = refr_monitor &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[240]"></a>refr_position</STRONG> (Thumb, 506 bytes, Stack size 48 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = refr_position &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Free
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_signal
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_scrl_signal
</UL>

<P><STRONG><a name="[205]"></a>refresh_childen_position</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = refresh_childen_position &rArr;  refresh_childen_position (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_position
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_position
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>

<P><STRONG><a name="[202]"></a>refresh_childen_style</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = refresh_childen_style &rArr;  refresh_childen_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_create
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_add_btn
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_create
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_page_create
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_add_btns
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_style
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_set_btn_selected
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_create
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_btn_signal
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_list_add
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_cont_create
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_signal
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_wifi_action
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_clock_action
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_bench_action
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiScanCheckCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerOpenCheckCallback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServerCloseCheckCallback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_select_action
</UL>

<P><STRONG><a name="[123]"></a>run_test_click</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = run_test_click &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>tab_btnm_action</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = tab_btnm_action &rArr; lv_tabview_set_tab_act &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[246]"></a>tabpage_press_lost_handler</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = tabpage_press_lost_handler &rArr; lv_tabview_set_tab_act &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_signal
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_scrl_signal
</UL>

<P><STRONG><a name="[247]"></a>tabpage_pressing_handler</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tabpage_pressing_handler &rArr; lv_obj_set_pos &rArr; lv_obj_invalidate &rArr; lv_inv_area
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_signal
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_scrl_signal
</UL>

<P><STRONG><a name="[e1]"></a>tabpage_scrl_signal</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tabpage_scrl_signal &rArr; tabpage_press_lost_handler &rArr; lv_tabview_set_tab_act &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_press_lost_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>tabpage_signal</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = tabpage_signal &rArr; tabpage_press_lost_handler &rArr; lv_tabview_set_tab_act &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_pressing_handler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tabpage_press_lost_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[243]"></a>tabview_realign</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = tabview_realign &rArr; lv_tabview_set_tab_act &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_tab_act
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_signal
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_add_tab
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
</UL>

<P><STRONG><a name="[12e]"></a>tcpserver_btn_close_action</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = tcpserver_btn_close_action &rArr; lv_mbox_create &rArr; lv_label_create &rArr; lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_realign
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_set_spin_time
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_create
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_RoundRobin_CreateTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>tcpserver_btn_open_action</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = tcpserver_btn_open_action &rArr; lv_mbox_create &rArr; lv_label_create &rArr; lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_realign
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_set_spin_time
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_create
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_RoundRobin_CreateTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[12f]"></a>tcpserver_btnm_action</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = tcpserver_btnm_action &rArr; lv_ta_set_text &rArr; lv_ta_add_char &rArr; lv_label_ins_text &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[1d1]"></a>usprintf</STRONG> (Thumb, 1738 bytes, Stack size 64 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = usprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_monitor
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_tcpserver_action
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btn_click_action
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_GETIP_Fnction
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadTaskGUI
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_CPU_TimerCallback
</UL>

<P><STRONG><a name="[11b]"></a>wifi_close_action_animation</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = wifi_close_action_animation &rArr; lv_obj_animate &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_animate
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Printf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_LOG_ADD
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[134]"></a>wifi_close_action_animation_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wifi_close_action_animation_cb &rArr; lv_obj_del &rArr; delete_children &rArr;  delete_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[13d]"></a>wifi_mbox_close_action</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wifi_mbox_close_action &rArr; lv_obj_del &rArr; delete_children &rArr;  delete_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[13a]"></a>wifi_scancancel_action</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = wifi_scancancel_action &rArr; lv_obj_del &rArr; delete_children &rArr;  delete_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_LOG_ADD
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>wifi_select_action</STRONG> (Thumb, 1534 bytes, Stack size 192 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = wifi_select_action &rArr; lv_ta_set_text &rArr; lv_ta_add_char &rArr; lv_label_ins_text &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_childen_style
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_realign
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_set_text
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_ta_create
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_set_map
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnm_create
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_RoundRobin_CreateTimer
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Realloc
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_MEM_Alloc
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>wifi_sw_action</STRONG> (Thumb, 520 bytes, Stack size 32 bytes, lto-llvm-ee9d41.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = wifi_sw_action &rArr; lv_mbox_create &rArr; lv_label_create &rArr; lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; RTE_MEM_Alloc &rArr; RTE_LOG_ADD &rArr; RTE_Vprintf &rArr; RTE_Assert &rArr; RTE_Printf &rArr;  RTE_Vprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbox_realign
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_set_spin_time
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_preload_create
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_create
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mbox_add_btns
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTE_RoundRobin_CreateTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-ee9d41.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
